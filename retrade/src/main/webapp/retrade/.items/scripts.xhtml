<ui:component xmlns:ui = 'http://java.sun.com/jsf/facelets'
  xmlns:f = 'http://java.sun.com/jsf/core'>

<script type = "text/javascript">
//<![CDATA[

function retrade_default(p)
{
  switch(p)
  {
    case 'button-height'          : return 30
    case 'button-square-width'    : return 30
    case 'button-square-height'   : return 30
    case 'button-selset-height'   : return 30
    case 'button-selset-width'    : return 34
    case 'inline-hdr-min-h'       : return 32
  }
}

function retrade_go_url(url)
{
  ZeT.asserts(url, 'No load URL is provided!')

  //?: {create relative go-address}
  if(url.indexOf('/go/retrade') == -1)
  {
    if(ZeTS.startsWith(url, '/'))
      url = ZeT.asserts(url.substring(1))
    url = "${z:url('/go/retrade/XYZ')}".replace('XYZ', url)
  }

  return url
}

function retrade_add_user_web_link(wl)
{
  ZeT.assert(ZeT.iso(wl))
  wl = ZeT.deepClone(wl)

  //~: assign proper link
  ZeT.asserts(wl.link)
  wl.link = retrade_go_url(wl.link)

  //~: issue add request
  function updateTxn(txn)
  {
    ZeT.asserts(txn)
    txn = parseInt(txn)
    ZeT.assert(ZeT.isn(txn))
    ZeT.defined('ReTrade.getUserWebLinks').txn = txn
    ReTrade.desktop.event('Успешно создана ссылка на: ' + wl.text)
  }

  //!: issue add action
  wl.task = 'add'
  jQuery.get("${z:url('/go/userlinks')}", wl, updateTxn).fail(function(x)
  {
    if(!ZeTS.ises(x.responseText))
      ReTrade.desktop.error(x.responseText)
  })
}

function retrade_open_window(opts)
{
  ZeT.assertn(opts)

  //?: {has domain key}
  if(opts.domainKey)
  {
    ZeT.asserts(opts.domainKey)
    ZeT.assert(ZeT.isu(opts.domain))

    opts.domain = 'desktop-window:' + opts.domainKey

    if(!ZeT.isu(opts.record)) //?: {has record key}
      opts.domain += ':record:' + opts.record
  }

  //?: {has no domain provided} make the default
  if(!opts.domain)
  {
    if(!opts.tempDomain) opts.domain = 'desktop-window:auto-domain:'
      else opts.domain = 'desktop-window:' + opts.tempDomain

    if(!ZeT.isu(opts.record)) //?: {has record key}
      opts.domain += ':record:' + opts.record + ':'

    if(!opts.domain.endsWith(':')) opts.domain += ':'
    opts.domain = extjsf.tempDomain(opts.domain)
  }

  ZeT.asserts(opts.domain, 'No ExtJSF window domain string is provided!')

  //~: lookup the window bind
  var winmain = extjsf.bind('winmain', opts.domain)

  //?: {has no box provided}
  if(!opts.box) opts.box = { widthpt: 480, heightpt: 360 }
  ZeT.assert(ZeT.iso(opts.box))

  //~: calculate the box
  var box = ReTrade.desktop.calcWindowBox(opts.box)

  if(winmain) //?: {has this window} show it
  {
    winmain.co().toFront()
    winmain.co().setPagePosition(box.x, box.y)
    winmain.co().expand()
    return
  }

  //~: load url
  opts.url = retrade_go_url(opts.url)

  //~: window layout
  if(!opts.layout) opts.layout = 'fit'
  ZeT.asserts(opts.layout)

  //~: parameters
  if(!opts.params) opts.params = {}
  ZeT.assert(ZeT.iso(opts.params))

  //~: domain parameter
  opts.params['${rootView.extjsDomainParam}'] = opts.domain

  //~: view mode parameter (default is body)
  if(!opts.params['${rootView.viewModeParam}'])
    opts.params['${rootView.viewModeParam}'] = 'body'

  //~: record parameter
  if(opts.record) opts.params['${rootView.entityParam}'] = '' + opts.record

  //~: create the window bind
  winmain = extjsf.defineBind('winmain', opts.domain).extjsProps({

    xtype: 'window', title: 'Загрузка...',
    x: box.x, y: box.y, width: box.width, height: box.height,
    layout: opts.layout, autoShow: !opts.hidden,
    collapsible: opts.collapsible,

    loader: { url: opts.url, autoLoad: true, scripts: true,
      ajaxOptions: { method: 'GET' }, params: opts.params
    }
  })

  //?: {has on-close}
  if(ZeT.isf(opts.onclose))
    winmain.on('beforedestroy', ZeT.fbind(opts.onclose, winmain))

  //~: create the ExtJS Window component & return the bind
  winmain.co(Ext.create('Ext.window.Window', winmain.extjsProps()))
  return winmain
}

function retrade_msg_open(id)
{
  ZeT.assertn(id, 'Can not open user event object by unknown primary key!')

  function openInfo(x)
  {
    var box = { widthpt: 580, heightpt: 420 }
    if(x.info.box) ZeT.extend(box, x.info.box)

    retrade_open_window({ url: retrade_go_url(x.info.page),
      box: box, record: id, domainKey: "${z:vid(rootView, 'retrade_msg_open')}"
    })
  }

  //~: access the unity description
  var xr = jQuery.get("${z:url('/go/unity')}", { entity: id })

  xr.done(function(x)
  {
    ZeT.assertn(x, 'Server could not return entity [', id, ']!')

    //?: {got object info page}
    if(x.info) openInfo(x)
  })

  xr.fail(function()
  {
    ZeT.log(xr)
    if(xr.status == 404)
      ReTrade.desktop.error('Выбранный объект был удалён из системы!')
    else
      ReTrade.desktop.error('Невозможно открыть объект!')
  })
}

/**
 * Returns function that sequentially loads a content
 * into the components denoted by the options list.
 */
function retrade_chain_loader(/* [callback], options for each area */)
{
  function load(next)
  {
    var url = this.url, bind = this.bind,
      domain = this.domain, viewMode = this.viewMode

    extjsf.defineBind('onload', domain, function(root)
    {
      bind.co().add(root.co())
      if(ZeT.isf(next)) next()
    })

    Ext.create('Ext.ComponentLoader', {
      target: bind.co(), url: url,
      ajaxOptions: {method: 'GET'}, autoLoad: true,
      scripts: true, params: {
        '${rootView.viewModeParam}': viewMode,
        '${rootView.extjsDomainParam}': domain
    }})
  }

  var prev = null

  //?: {has callback}
  if(ZeT.isf(arguments[0]))
    prev = arguments[0] //<-- will be the last

  //~: build the loads chain
  ZeT.each(arguments, function(opts)
  {
    if(!ZeT.iso(opts)) return

    //?: {not an active item}
    if(opts.active === false || opts.active === 'false') return

    //~: process the load url
    opts.url = retrade_go_url(opts.url)

    //?: {has no bind}
    ZeT.assert(opts.bind && opts.bind.extjsfBind === true)

    //~: select the content domain
    if(opts.domain) ZeT.asserts(opts.domain); else if(opts.tempDomain)
    {
      ZeT.asserts(opts.tempDomain)
      opts.domain = extjsf.tempDomain(opts.tempDomain)
    }

    //?: {has no domain}
    ZeT.asserts(opts.domain)

    //~: view mode
    if(!opts.viewMode) opts.viewMode = 'body'

    //~: add to the loading chain
    prev = ZeT.fbind(load, opts, prev)
  })

  //~: invoke the loads chain
  return function()
  {
    if(prev) prev()
  }
}

function retrade_chain_on_load(domain, rootBind)
{
  ZeT.asserts(domain)

  var onload = extjsf.bind('onload', domain)
  if(!onload) return

  if(ZeT.iss(rootBind))
    rootBind = extjsf.bind(rootBind, domain)
  ZeT.assert(rootBind && rootBind.extjsfBind === true)

  onload(rootBind)
}

function retrade_replicate_store(master, slave, domain)
{
  if(ZeT.iss(master))
    master = extjsf.bind(master, domain)
  master = extjsf.asbind(master)
  ZeT.assert(master)

  if(ZeT.iss(slave))
    slave = extjsf.bind(slave, domain)
  slave = extjsf.asbind(slave)
  ZeT.assert(slave)

  function synch_data()
  {
    var rs = []; master.co().each(
      function(m){ rs.push(m.copy()) })

    slave.co().removeAll()
    slave.co().add(rs)
  }

  if(master.co() && slave.co() && master.co().isLoaded())
    synch_data()

  //~: record inserted-removed
  master.on('datachanged', synch_data)

  //~: record changed
  master.on('update', function(s, m, op, fs)
  {
    ZeT.assertn(m.getId())
    var x = ZeT.assertn(slave.co().getById(m.getId()),
      'Record ID [', m.getId(), '] is not found in the slave Store!')

    //~: assign the updated fields
    ZeT.each(fs, function(f){ x.set(f, m.get(f)) })
  })
}

/**
 * Creates modal yes-no dialog and invokes
 * the functor given with true as 'yes',
 * or false as 'no'.
 *
 * The options are:
 *
 * · all options of Desktop.calcWindowBox();
 *
 * · cls → the main CSS class;
 *
 * · icon → CSS class of the icon;
 *
 * · iconWidth, iconHeight → icon sizes;
 *
 * · title [required] → window title;
 *
 * · message [required] → the message.
 *
 * · modal [true] → is modal dialog;
 *
 * · fn → may be used instead of the
 *    second argument.
 *
 * · yes, no → functions invoked when
 *    the second argument is undefined,
 *    and 'fn' option is not set.
 */
function retrade_yes_no(opts, f)
{
  ZeT.assertn(opts)

  var p = {
    buttons: Ext.MessageBox.YESNO, closable: false,
    buttonText: { yes: 'Нет', no: 'Да'} //!: swap them
  }

  //~: calculate the box
  var box = ReTrade.desktop.calcWindowBox.call(ReTrade.desktop, opts)
  p.width = box.width //<-- height is auto
  ZeT.assert(ZeT.isn(p.width) && (p.width > 0))
  ZeT.assert(ZeT.isn(box.x) && ZeT.isn(box.y))

  //=: css
  if(!ZeTS.ises(opts.css))
    p.css = opts.css

  //=: icon
  if(!ZeTS.ises(opts.icon))
    p.icon = opts.icon

  //=: icon width
  if(ZeT.isn(opts.iconWidth))
    p.iconWidth = opts.iconWidth

  //=: icon height
  if(ZeT.isn(opts.iconHeight))
    p.iconHeight = opts.iconHeight

  //=: title
  ZeT.assert(!ZeTS.ises(opts.title))
  p.title = opts.title

  //=: message
  ZeT.assert(!ZeTS.ises(opts.message))
  p.msg = opts.message

  //=: modal
  p.modal = ZeT.i$xtrue(opts.modal)

  //~: user callback
  if(!f) f = opts.fn
  if(!f) f = function(yes)
  {
    if(yes && ZeT.isf(opts.yes))
      return opts.yes.call(this)

    if(!yes && ZeT.isf(opts.no))
      return opts.no.call(this)
  }

  //~: lower callback
  ZeT.assert(ZeT.isf(f))
  p.fn = function(x)
  {
    //!: as buttons are swapped, 'no' is yes (true)
    return f.call(this, (x === 'no'))
  }

  //!: create the dialog
  var win = Ext.Msg.show(p)

  //~: place it
  win.setPosition([box.x, box.y])
  return win
}

function retrade_yes_no_ask_warning(opts)
{
  ZeT.extend(ZeT.assertn(opts), {
    cls: 'retrade-message-box-ask-warning',
    icon: 'retrade-message-box-ask-warning-icon',
    iconWidth: 48 + extjsf.pt(6), iconHeight: 48
  })

  return retrade_yes_no.apply(this, arguments)
}

//]]>
</script>
</ui:component>