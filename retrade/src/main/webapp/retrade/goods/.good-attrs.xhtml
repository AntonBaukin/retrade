<?xml version = '1.0' encoding = 'UTF-8'?>

<ui:component xmlns = 'http://www.w3.org/1999/xhtml'
  xmlns:ui = 'http://java.sun.com/jsf/facelets'
  xmlns:c  = 'http://java.sun.com/jsp/jstl/core'
  xmlns:f  = 'http://java.sun.com/jsf/core'
  xmlns:x  = 'http://java.sun.com/jsf/composite/.xhtml'
  xmlns:z  = 'uri:tverts.com'>


  <!-- [store of attribute values] -->
  <x:data-store storeId = "${z:vid(v, 'goodAttrs')}" modelView = "${v}">
    <f:facet name = "store-props">
      model: 'retrade.model.GoodAttrView', data: []
    </f:facet>

    <f:facet name = "proxy-props">
      noproxy: true
    </f:facet>
  </x:data-store>


  <!-- [attributes display table -->

  <x:data-grid coid = "${z:vid(v, 'attrs-view')}"
    storeId = "${z:vid(v, 'goodAttrs')}">

    <f:facet name = "grid-props">
      flex: 1, hidden: true, pager: false, sortableColumns: true,
      selModel: extjsf.delayCreate('Ext.ux.selection.No'),
      sorters: [{ property: 'nameLo', direction: 'ASC' }],
      columns:  [

        {
          text: "Наименование", dataIndex: 'nameLo',
          flex: 1, sortable: true
        },

        {
          text: "Значение", dataIndex: 'value', sortable: false, flex: 1,
          menuDisabled: true, tdCls:'retrade-selectable-column', renderer: function(v)
          {
            if(!ZeT.isa(v)) return v

            var s = ''; ZeT.each(v, function(x)
            {
              if(ZeTS.ises(x)) return
              if(s.length) s += '&lt;br/&gt;'
              s += x
            })

            return s
          }
        }
      ]
    </f:facet>
  </x:data-grid>

  <!-- attributes display table] -->


  <!-- [attribute types store] -->
  <x:data-store storeId = "${z:vid(v, 'attrTypes')}"
    modelProvider = "facesGoodAttrsView" pageSize = "0">

    <f:facet name = "store-props">
      model: 'retrade.model.GoodAttrView'
    </f:facet>

    <f:facet name = "proxy-props">
      reader: ZeT.defined('retrade.readers.GoodAttrView')
    </f:facet>
  </x:data-store>


  <!-- [attributes edit table -->

  <x:data-grid coid = "${z:vid(v, 'attrs-edit')}"
    storeId = "${z:vid(v, 'goodAttrs')}">

    <f:facet name = "grid-props">
      flex: 1, hidden: true, pager: false, sortableColumns: true,
      selModel: extjsf.delayCreate('Ext.selection.RowModel', { mode: 'MULTI', allowDeselect: true }),
      sorters: [{ property: 'nameLo', direction: 'ASC' }],

      plugins: [{
        ptype: 'cellediting', pluginId: 'cellediting', clicksToEdit: 1,
        listeners : {
          edit: function(ed, event)
          {
            var g = extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')
            delete g.editEvent
            g.valueEdited(ed, event)
          },

          beforeedit : function(ed, event)
          {
            var g = extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')
            return g.editStarted(ed, g.editEvent = event)
          }}
      }],

      columns: ZeT.scope(function()
      {
        function renderArray(ox, meta)
        {
          if(!ox) return ''
          meta.tdAttr = (ox.array)?
            ("title='Атрибут может хранить несколько значений данного типа'"):
            ("title='Атрибут может хранить только одно значение данного типа'")
          return (ox.array)?('да'):('нет')
        }

        function renderValue(v, meta, model)
        {
          v = model.get('value')
          if(!ZeT.isa(v)) return v

          var table = $('#' + "${z:vid(v, 'attrs-values-table')}").find('table').clone()
          var row   = table.find('tr')
          var body  = row.parent()
          row.remove()

          ZeT.each(v, function(x)
          {
            if(ZeTS.ises(x)) return

            var xyz = row.clone()
            body.append(xyz)

            //:= array item value
            xyz.find('td:last-child span').text(x).attr('onclick', ZeTS.cat(
              "extjsf.bind(\"${z:vid(v, 'goodAttrs')}\", '${rootView.extjsDomain}').",
              'retradeEditArrayValue("', model.getId(), '", "', x,
              '", event || window.event)'
            ))

            //~: on remove button click
            xyz.find('.retrade-edit-delete').attr('onclick', ZeTS.cat(
              "extjsf.bind(\"${z:vid(v, 'goodAttrs')}\", '${rootView.extjsDomain}').",
              'retradeRemoveArrayValue("', model.getId(), '", "', x,
              '", event || window.event)'
            ))
          })

          return table[0].outerHTML
        }


        //~: attribute type select
        var typeSelect = Ext.create('Ext.form.field.ComboBox', {
          store: "${z:vid(v, 'attrTypes')}", editable: false,
          valueField: 'pkey', displayField: 'nameLo'
        })


        //~: value editor
        var valueEditor = Ext.create('Ext.form.field.Text', {})


        return [

          {
            text: "Наименование", dataIndex: 'nameLo',
            flex: 1, sortable: true, editor: typeSelect
          },

          {
            text: "Массив", dataIndex: 'ox', sortable: false,
            width: extjsf.ex(9), align: 'center', renderer: renderArray
          },

          {
            text: "Значение", dataIndex: 'temp', sortable: false, flex: 1,
            menuDisabled: true, tdCls:'retrade-selectable-column',
            renderer: renderValue, editor: valueEditor
          }
        ]
      })
    </f:facet>
  </x:data-grid>


  <!-- [template of array of values table] -->
  <div style = "display:none" id = "${z:vid(v, 'attrs-values-table')}">

    <table class = "retrade-good-attrs-edit-values-table"
      cellpadding = "0" cellspacing = "0" border = "0">

      <tr class = "retrade-good-attrs-edit-values-table-row">
        <td><div class = "retrade-edit-delete"
          title = "Удалить значение из массива"></div></td>

        <td><span title = "Изменить значение"/></td>
      </tr>
    </table>
  </div>

  <!-- attributes edit table] -->


  <script type = "text/javascript">
  //<![CDATA[

  //~: assign values from the attributes on good ox
  extjsf.bind("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}').
    updateGoodOx = function(ox, isReadMode)
  {
    var store = extjsf.co("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')
    var vgrid = extjsf.bind("${z:vid(v, 'attrs-view')}", '${rootView.extjsDomain}')
    var egrid = extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')

    //~: clear the store
    store.removeAll()

    //~: toggle tables
    vgrid.visible(isReadMode)
    egrid.visible(!isReadMode)

    //~: connect the store to the model
    store.extjsfBind.retradeOxModel = ox

    //?: {has nothing}
    if(!ox || !ZeT.isa(ox.attributes)) return

    function v2s(v)
    {
      if(ZeT.iss(v))     return v
      if(v && v.text)    return v.text
      if(v && v.integer) return '' + v.integer
      if(v && v.decimal) return '' + v.decimal
      return ''
    }

    //~: add items from the attributes
    ZeT.each(ox.attributes, function(a)
    {
      //?: {has single value}
      if(!a.array)
      {
        ZeT.assert(!ZeT.isa(a.values))
        a.value = v2s(a.value)
      }
      //?: {not processed yet}
      else if(!ZeT.isa(a.value))
        //?: {array with single value}
        if(!ZeT.isa(a.values))
          a.value = [ v2s(a.value) ]
        //~: have array of values
        else ZeT.each(a.values, function(v)
        {
          if(!a.value) a.value = []
          a.value.push(v2s(v))
        })

      //!: add to the store
      var m = store.add(a)[0]

      //=: id
      m.setId('' + a.pkey)

      //=: temporary edit
      m.set('temp', (a.array)?(''):(a.value))

      //=: self reference
      m.set('self', a)
      m.set('selfox', ox)

      m.commit(true)
    })

    //~: sort the attributes
    store.sort('nameLo', 'ASC')
  }


  //~: callback function to remove value from array
  extjsf.bind("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}').
    retradeRemoveArrayValue = function(id, v, e)
  {
    e = Ext.create('Ext.event.Event', e)
    e.stopEvent()

    var store = extjsf.co("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')
    var model = store.getById(id);  if(!model) return
    var value = model.get('value'); if(!ZeT.isa(value)) return

    ZeTA.del(value, v)
    value = ZeTA.copy(value)

    model.set('value', value)
    model.get('self').values = value
  }


  //~: callback function to edit value in array
  extjsf.bind("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}').
    retradeEditArrayValue = function(id, v)
  {
    var store = extjsf.co("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')
    var model = store.getById(id);  if(!model) return
    var value = model.get('value'); if(!ZeT.isa(value)) return

    model.set('temp', v)
    model.set('temp-edited', v)
  }


  //~: filter attribute types
  extjsf.bind("${z:vid(v, 'attrTypes')}", '${rootView.extjsDomain}').
    filterAttrTypes = function()
  {
    var vstore = extjsf.co("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')
    var astore = extjsf.co("${z:vid(v, 'attrTypes')}", '${rootView.extjsDomain}')

    //~: exclude attributes that are already selected
    astore.filterBy(function(a)
    {
      return !vstore.getById(a.getId())
    })

    return !!astore.getCount()
  }


  //~: value edit start
  extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}').
    editStarted = function(ed, event)
  {
    var astore = extjsf.bind("${z:vid(v, 'attrTypes')}", '${rootView.extjsDomain}')

    //?: {editing attribute type}
    if(event.field == 'nameLo')
    {
      //?: {has type selected}
      if(!ZeTS.ises(event.value) && !ZeT.isx(event.record.get('value')))
        return false //<-- forbid to alter it

      return
    }

    //?: {has no type selected}
    if(ZeTS.ises(event.record.get('nameLo')))
    {
      ReTrade.desktop.error('До задания значения выберете атрибут!')
      return false //<-- forbid to edit value of unknown type
    }

    //~: apply filter on the types
    astore.filterAttrTypes()
  }


  //~: assign attribute type
  extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}').
    assignAttrType = function(m, attrId)
  {
    var s = extjsf.bind("${z:vid(v, 'attrTypes')}", '${rootView.extjsDomain}')
    var a = ZeT.assertn(s.co().getById(attrId))
    var d = a.getData(), ox = ZeT.assertn(m.get('selfox'))

    if(a.get('ox').array) d.array = true
    m.set(d); m.setId(a.getId())

    //~: array value
    m.set('value', d.value = ((d.array)?[]:('')))

    //=: temporary edit
    m.set('temp', d.value)

    //~: bind to the attributes
    m.set('self', d)
    if(!ox.attributes) ox.attributes = []
    ox.attributes.push(d)
  }


  //~: value edit callback
  extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}').
    valueEdited = function(ed, event)
  {
    var vgrid = extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')

    //?: {edited attribute type}
    if(event.field == 'nameLo')
    {
      //?: {has value selected}
      if(!ZeTS.ises(event.value))
        vgrid.assignAttrType(event.record, event.value)

      return
    }

    var v = event.record.get('value')
    var x = event.record.get('temp')
    var s = event.record.get('self')

    if(ZeT.iss(v)) v = x; else if(ZeT.isa(v))
    {
      var te = event.record.get('temp-edited')
      var  i = ZeTS.ises(te)?(-1):(v.indexOf(te))

      if(v.indexOf(x) == -1)
        if(i == -1) v.push(x)
        else v[i] = x

      event.record.set('temp',  '')
      event.record.set('temp-edited',  '')
    }

    event.record.set('value', v)
    if(s.array) s.values = v; else s.value = v
  }


  //~: delete selected attributes
  extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}').
    deleteSelected = function()
  {
    var grid = extjsf.co("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')
    var sel  = grid.getSelection()

    grid.getSelectionModel().deselectAll()

    ZeT.each(sel, function(m)
    {
      var ox = m.get('selfox')
      var  a = m.get('self')

      ZeTA.del(ox.attributes, a)
    })

    grid.getStore().remove(sel)
  }


  //~: add new attribute
  extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}').
    addAttribute = function()
  {
    var astore = extjsf.bind("${z:vid(v, 'attrTypes')}", '${rootView.extjsDomain}')
    var vstore = extjsf.bind("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')
    var vgrid  = extjsf.bind("${z:vid(v, 'attrs-edit')}", '${rootView.extjsDomain}')

    function startEdit(x)
    {
      vgrid.co().getPlugin('cellediting').
        startEditByPosition({ column: 0, row: vstore.co().indexOf(x) })
    }

    //~: search for empty attribute
    var found; astore.co().each(function(x)
    {
      if(ZeTS.ises(x.get('nameLo'))) { found = x; return false }
    })

    //?: {found existing} start edit it
    if(found) return startEdit(found)

    //?: {has no more types}
    if(!astore.filterAttrTypes()) return ReTrade.desktop.
      error('Список аттрибутов товаров пуст!')

    var ox = ZeT.assertn(vstore.retradeOxModel)

    //~: insert new record
    var m = vstore.co().add({ selfox: ox })[0]

    //?: {has more than one option}
    if(astore.co().getCount() > 1)
      return startEdit(m)

    var attrId = astore.co().getAt(0).getId()
    vgrid.assignAttrType(m, attrId)
  }


  //]]>
  </script>
</ui:component>