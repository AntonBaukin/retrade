<?xml version = '1.0' encoding = 'UTF-8'?>

<ui:component xmlns:ui = 'http://java.sun.com/jsf/facelets'
  xmlns:c  = 'http://java.sun.com/jsp/jstl/core'
  xmlns:f  = 'http://java.sun.com/jsf/core'
  xmlns:z  = 'uri:tverts.com'>

<c:set var = "v" scope = "request" value = "${facesGoodEditView}"/>

${rootView.forceSecure('view: goods')}
${v.checkModelRequestedWithRedirect}

<ui:decorate template = '/resources/.view-modes/body.xhtml'
   xmlns    = 'http://www.w3.org/1999/xhtml'
   xmlns:h  = 'http://java.sun.com/jsf/html'
   xmlns:x  = 'http://java.sun.com/jsf/composite/.xhtml'>

<ui:define name = 'page_body'>

<x:winmain coid = "${z:vid(v, 'root-panel')}">

  <script type = "text/javascript">
  //<![CDATA[

    extjsf.co('winmain', '${rootView.extjsDomain}').
      setTitle("#{z:jss(v.editWindowTitle)}")

  //]]>
  </script>

  <f:facet name = "extjs-props">
    layout: {type: 'vbox', align: 'stretch'},
    bodyCls: 'retrade-back-panel'
  </f:facet>

  <f:facet name = "toolbar-props">
    xtype: 'panel', bodyPadding: extjsf.pt(2),
    layout: {type: 'hbox', align: 'middle'},
    bodyCls: 'retrade-toolbar-panel'
  </f:facet>


  <!-- [toolbar -->

  <f:facet name = "toolbar">

    <!-- [cancel edit button] -->
    <x:component coid = "${z:vid(v, 'cancel-edit')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Отмена',
        cls: 'ux-btn-red',
        handler : function()
        {
          extjsf.co('winmain', '${rootView.extjsDomain}').close()
        }
      </f:facet>
    </x:component>


    <!-- [close window button] -->
    <x:component coid = "${z:vid(v, 'close')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Закрыть',
        handler : function()
        {
          extjsf.co('winmain', '${rootView.extjsDomain}').close()
        }
      </f:facet>
    </x:component>


   <!-- [goto calculation button] -->

   <x:component coid = "${z:vid(v, 'goto-calc')}">
    <f:facet name = "extjs-props">

      xtype: 'button', text: 'Производство',
      hidden: ('true' != "#{v.model.editMode or not empty v.model.calc}"),
      margin: extjsf.pts(0, 4, 0, 4), tooltipType: 'title',
      tooltip: 'Перейти к формуле (рецепту) производства продукта или полуфабриката'

    </f:facet>
   </x:component>

   <x:winaction-delegate coid = "${z:vid(v, 'goto-calc-script')}"
     action = "#{v.gotoWhere('calc')}">

     <f:facet name = "action-params">
       '${v.modelParam}': '#{v.modelKeys}'
     </f:facet>
   </x:winaction-delegate>


   <x:component coid = "${z:vid(v, '_tb_fill_0')}">
     <f:facet name = "extjs-props">
       xtype: 'panel', flex: 1, border: false,
       bodyCls: 'retrade-toolbar-inline-panel'
     </f:facet>
   </x:component>


   <x:component coid = "${z:vid(v, 'show-attrs')}">
    <f:facet name = "extjs-props">

      xtype: 'button', text: 'Атрибуты', enableToggle: true,
      tooltipType: 'title', tooltip: 'Отобразить дополнительные атрибуты товара'

    </f:facet>
   </x:component>


   <!-- [submit button] -->
   <x:component coid = "${z:vid(v, 'submit')}">
    <f:facet name = "extjs-props">
      xtype: 'button', text: 'Сохранить', cls: 'ux-btn-green',
      margin: extjsf.pts(0, 0, 0, 4)
    </f:facet>
   </x:component>


   <!-- [do-edit] -->
   <x:component coid = "${z:vid(v, 'do-edit')}">
     <f:facet name = "extjs-props">
       xtype: 'button', text: 'Редактировать',
       margin: extjsf.pts(0, 0, 0, 4),
       disabled: ${not v.isSecure('edit: goods')}
     </f:facet>
   </x:component>
  </f:facet>

  <!-- toolbar] -->


  <!-- [good status bar -->

  <f:facet name = "status-props">
    xtype: 'panel', bodyPadding: extjsf.pt(2),
    layout: {type: 'hbox', align: 'middle'},
    bodyCls: 'retrade-status-panel'
  </f:facet>


  <f:facet name = "status">

    <!-- [derived] -->

    <x:html coid = "${z:vid(v, '_derived')}" rendered = "#{v.calcView.derived}">
      <f:facet name = "extjs-props">
        xtype: 'panel', frame: false, border: false
      </f:facet>

      <table class = "retrade-info-table retrade-good-info-table-derived"
        cellpadding = "0" cellspacing = "0" border = "0">

        <tr>
          <td class = "retrade-info-value-small-text retrade-good-info-value-derived">
            <div>ПРОИЗВОДНЫЙ</div>
          </td>
        </tr>
      </table>
    </x:html>


    <x:component coid = "${z:vid(v, '_sb_fill_0')}">
     <f:facet name = "extjs-props">
       xtype: 'panel', flex: 1, border: false,
       bodyCls: 'retrade-status-panel'
     </f:facet>
    </x:component>


    <!-- [good type] -->

    <x:html coid = "${z:vid(v, '_good_type')}">
      <f:facet name = "extjs-props">
        xtype: 'panel', frame: false, border: false
      </f:facet>

      <table class = "retrade-info-table retrade-good-info-table-type"
        cellpadding = "0" cellspacing = "0" border = "0">

        <tr>
          <td class = "retrade-info-value-small-text retrade-good-info-value-type">
            <div>
              <ui:fragment rendered = "#{v.material}">
                СЫРЬЁ или ТОВАР
              </ui:fragment>

              <ui:fragment rendered = "#{not v.material and not v.semiReady}">
                ПРОДУКТ или ИНГРИДИЕНТ
              </ui:fragment>

              <ui:fragment rendered = "#{not v.material and v.semiReady}">
                ПОЛУФАБРИКАТ
              </ui:fragment>
            </div>
          </td>
        </tr>
      </table>
    </x:html>

  </f:facet>

  <!-- good status bar] -->


  <!-- [good attributes grid] -->
  <x:component coid = "${z:vid(v, 'good-attrs-ext')}">

    <f:facet name = "extjs-props">
      flex: 1, border: false, hidden: true,
      layout: {type: 'vbox', align: 'stretch'},
      bodyCls: 'retrade-transparent-panel'
    </f:facet>

    <ui:decorate template = '.good-attrs.xhtml'/>
  </x:component>


  <!-- [good edit form -->

  <x:form-panel modelView = "${v}" coid = "${z:vid(v, 'good-form')}">

    <f:facet name = "extjs-props">
      border: false, flex: 1, bodyPadding: extjsf.pt(4),
      layout: { type: 'vbox', align: 'stretch' },
      bodyCls: 'retrade-content-panel'
    </f:facet>


    <!-- [code and measure unit -->

    <x:component coid = "${z:vid(v, '_code_measure')}">
      <f:facet name = "extjs-props">
        bodyCls: 'retrade-transparent-panel', border: false,
        layout: {type: 'hbox', align: 'middle'},
        margin: extjsf.pts(6, 0, 0, 0)
      </f:facet>


      <!-- [code] -->
      <x:text-field coid = "${z:vid(v, 'code')}"
        value = "#{v.goodView.goodCode}">

        <f:facet name = "extjs-props">
          extjsfReadWrite: true, allowBlank: false,
          flex: 2, validator: function()
          {
            return extjsf.bind("${z:vid(v, 'code')}", '${rootView.extjsDomain}').validityStatus || true;
          }
        </f:facet>

        <f:facet name = "label-props">
          text: 'Код', cls: 'retrade-info-title-label',
          width: extjsf.ex(7), margin: extjsf.pts(0, 4, 0, 0)
        </f:facet>
      </x:text-field>


      <!-- [measure unit -->

      <x:data-store storeId = "${z:vid(v, 'measures')}"
        modelProvider = "facesGoodEditView" modelRequest  = "measures"
        modelKey = "#{v.modelKeys}">

        <f:facet name = "store-props">
          model: 'retrade.model.MeasureUnitView', data: [],
          autoLoad: ('true' == "#{v.model.editMode}"),
        </f:facet>

        <f:facet name = "proxy-props">
          reader: ZeT.defined('retrade.readers.MeasureUnitView')
        </f:facet>
      </x:data-store>

      <x:drop-list coid = "${z:vid(v, 'measure')}"
        storeId = "${z:vid(v, 'measures')}"
        value  = "#{v.goodView.measureKey}">

        <f:facet name = "drop-props">
          readOnly: true, allowBlank: false,
          editable: false, matchFieldWidth: true, flex: 3,
          valueField: 'objectKey', displayField: 'code'
        </f:facet>

        <f:facet name = "label-props">
          text: 'ед. изм.', cls: 'retrade-info-title-label',
          margin: extjsf.pts(0, 4, 0, 6)
        </f:facet>
      </x:drop-list>


      <!-- [goto measures] -->
      <x:component coid = "${z:vid(v, 'goto-measures')}" rendered = "#{not v.creating}">

        <f:facet name = "extjs-props">
          xtype: 'button', iconCls: 'retrade-measure-icon', margin: extjsf.pts(0, 0, 0, 6),
          tooltipType: 'title', tooltip: 'Просмотр и редактирование единиц измерения, заданных для данного товара',
          handler: function() {
            extjsf.bindHandler("${z:vid(v, 'goto-measures-script')}", '${rootView.extjsDomain}')()
          }
        </f:facet>
      </x:component>

    </x:component>

    <!-- measure unit] -->

    <!-- code and measure unit] -->


    <!-- [name] -->
    <x:component coid = "${z:vid(v, '_name')}">
      <f:facet name = "extjs-props">
        bodyCls: 'retrade-transparent-panel', border: false,
        layout: {type: 'hbox', align: 'middle'},
        margin: extjsf.pts(6, 0, 0, 0)
      </f:facet>

      <x:text-field coid = "${z:vid(v, 'name')}"
         value = "#{v.goodView.goodName}">

        <f:facet name = "extjs-props">
          extjsfReadWrite: true, allowBlank: false, flex: 1
        </f:facet>

        <f:facet name = "label-props">
          text: 'Имя', cls: 'retrade-info-title-label',
          width: extjsf.ex(7), margin: extjsf.pts(0, 4, 0, 0)
        </f:facet>
      </x:text-field>
    </x:component>


    <!-- [group -->

    <x:data-store storeId = "${z:vid(v, 'groups')}"
      modelProvider = "facesGoodEditView" modelRequest  = "groups"
      modelKey = "#{v.modelKeys}">

      <f:facet name = "store-props">
        model: 'retrade.model.CatItemView',
        autoLoad: ('true' == "#{v.model.editMode}")
      </f:facet>

      <f:facet name = "proxy-props">
        reader: ZeT.defined('retrade.readers.CatItemView')
      </f:facet>
    </x:data-store>

    <x:component coid = "${z:vid(v, '_group')}">
      <f:facet name = "extjs-props">
        bodyCls: 'retrade-transparent-panel', border: false,
        layout: {type: 'hbox', align: 'middle'},
        margin: extjsf.pts(6, 0, 6, 0)
      </f:facet>

      <x:drop-list coid = "${z:vid(v, 'group')}"
        storeId = "${z:vid(v, 'groups')}"
        value = "#{v.goodView.goodGroup}">

        <f:facet name = "drop-props">
          extjsfReadWrite: true, flex: 1,
          matchFieldWidth: true, autoSelect: false,
          valueField: 'code', displayField: 'code'
        </f:facet>

        <f:facet name = "label-props">
          text: 'Группа', cls: 'retrade-info-title-label',
          width: extjsf.ex(7), margin: extjsf.pts(0, 4, 0, 0)
        </f:facet>
      </x:drop-list>
    </x:component>

    <!-- group] -->


    <!-- [good is used -->

    <x:html coid = "${z:vid(v, 'good_used')}"
      rendered = "#{not v.creating}">

      <f:facet name = "extjs-props">
        bodyCls: 'retrade-transparent-panel', border: false,
        margin: extjsf.pts(8, 0, 4, 0), hidden: true
      </f:facet>

      <table class = "retrade-good-edit-is-used unselectable-text"
        cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td><div></div></td>
          <td>
            <div>Функции редактирования <span style = "white-space:nowrap">ограничены —</span>
            товар <span id = "${z:vid(v, 'good-used')}"></span>!</div>
          </td>
        </tr>
      </table>
    </x:html>

    <!-- good is used] -->


    <!-- [add to selection set] -->
    <x:component coid = "${z:vid(v, '_add_to_selset')}">
      <f:facet name = "extjs-props">
        bodyCls: 'retrade-transparent-panel', border: false,
        layout: {type: 'hbox', align: 'middle'},
        margin: extjsf.pts(0, 0, 6, 0)
      </f:facet>

      <x:checkbox-field coid = "${z:vid(v, 'add-to-selset')}" value = "">

        <f:facet name = "extjs-props">
          hidden: ('false' == "#{v.model.selSetAble}"),
          checked: !!extjsf.bind('winmain', '${rootView.extjsDomain}').retradeAddSelSetChecked,
          cls: 'retrade-align-right', fieldStyle: { marginRight: '4pt' }
        </f:facet>

        <f:facet name = "label-props">
          hidden: ('false' == "#{v.model.selSetAble}"),
          html: "&lt;span title = 'Добавить созданный товар в текущую выборку?'&gt;добавить в выборку&lt;/span&gt;"
        </f:facet>
      </x:checkbox-field>
    </x:component>


    <!-- [selection set] -->
    <x:hidden-field coid = "${z:vid(v, 'selset')}" value = "#{v.selSet}"/>

    <!-- [read-edit mode]-->
    <x:hidden-field coid = "${z:vid(v, 'edit')}" value = "#{v.model.editMode}"/>


    <!-- [special: submit action] -->
    <h:commandButton id = "${z:vid(v, 'submit-action')}" value = "submit" style = "display: none;"
      action = "#{v.doCommitEdit}"/>

  </x:form-panel>

  <!-- code exists checker -->
  <x:action-call coid = "${z:vid(v, 'check-code-exists-script')}"
    action = "#{v.doCheckCodeExists}">

    <f:facet name = "action-params">
      '${v.modelParam}': '${v.modelKeys}'
    </f:facet>
  </x:action-call>


  <!-- [goto measures script] -->
  <x:winaction-delegate coid = "${z:vid(v, 'goto-measures-script')}"
    action = "#{v.gotoWhere('measures')}" rendered = "#{not v.creating}">

    <f:facet name = "action-params">
      '${v.modelParam}': '#{v.modelKeys}',
      'edit-mode': ZeT.delay(function()
      {
        return !extjsf.bind("${z:vid(v, 'good-form')}", '${rootView.extjsDomain}').isReadMode
      })
    </f:facet>
  </x:winaction-delegate>


  <script type = "text/javascript">
  //<![CDATA[

  //~: validate on code change
  extjsf.bind("${z:vid(v, 'code')}", '${rootView.extjsDomain}').on('change', function(f, v)
  {
     var fb = f.extjsfBind;
     fb.retradeCodeCheck = v; fb.validityStatus = true;

     if(ZeTS.trim(v) != v)
       fb.validityStatus = 'Код не может начинаться или оканчиваться пробелами!';
     if(f.validate() !== true) return;

     ZeT.timeout(1000, function()
     {
       if(fb.retradeCodeCheck != v) return;

       extjsf.xbindHandler("${z:vid(v, 'check-code-exists-script')}", '${rootView.extjsDomain}')({
          params: { code : fb.retradeCodeCheck }, failure: function()
          {
            fb.validityStatus = ZeT.a(f.getActiveErrors())[0];
            if(ZeTS.ises(fb.validityStatus)) fb.validityStatus = true;
            f.validate()
          }
       })
     })
  })


  //~: submit the form
  extjsf.bindHandler("${z:vid(v, 'submit')}", '${rootView.extjsDomain}', function()
  {
    var form = extjsf.bind("${z:vid(v, 'good-form')}", '${rootView.extjsDomain}');
    if(!form.co().isValid()) return;


    //?: {has selection set checked}
    var addss = extjsf.co("${z:vid(v, 'add-to-selset')}", '${rootView.extjsDomain}');
    var ssnam = extjsf.co("${z:vid(v, 'selset')}", '${rootView.extjsDomain}');

    if(addss.getValue() && addss.isVisible())
      ssnam.setValue(ReTrade.selset.selset)


    //!: submit the form
    form.submitForm({ '${v.viewModeParam}': '${v.viewModePostStr}',
      command: "${z:vid(v, 'submit-action')}", success: function()
      {
        var winmain = extjsf.bind('winmain', '${rootView.extjsDomain}');
        winmain.retradeEditDone = true
        winmain.retradeAddSelSetChecked = (addss.getValue() && addss.isVisible())

        extjsf.bindHandler("${z:vid(v, 'cancel-edit')}", '${rootView.extjsDomain}')()
      }
    })
  })


  //~: go to the calculation
  extjsf.bindHandler("${z:vid(v, 'goto-calc')}", '${rootView.extjsDomain}', function()
  {
    var form = extjsf.bind("${z:vid(v, 'good-form')}", '${rootView.extjsDomain}');

    //!: submit the form with go to
    form.submitForm({ '${v.viewModeParam}': '${v.viewModePostStr}',
      params: {immediate: true}, success: function()
      {
        extjsf.bindHandler("${z:vid(v, 'goto-calc-script')}", '${rootView.extjsDomain}')()
      }
    })
  })


  //~: submit on enter for text fields
  Ext.Array.forEach([ 'code', 'measure', 'name' ],
    function(id)
    {
       extjsf.bind("${z:vid(v, 'XYZ')}".replace('XYZ', id), '${rootView.extjsDomain}').on('specialkey', function(f, e)
       {
         if(e.getKey() == e.ENTER)
           extjsf.bindHandler("${z:vid(v, 'submit')}", '${rootView.extjsDomain}')()
         else if(e.getKey() == e.ESC)
           extjsf.bindHandler("${z:vid(v, 'cancel-edit')}", '${rootView.extjsDomain}')()
       })
    })

  ZeT.scope(function()
  {
    var isReadMode, checkGoodUsed

    var status = extjsf.bind("${z:vid(v, 'root-panel-status')}", '${rootView.extjsDomain}')
    var form   = extjsf.bind("${z:vid(v, 'good-form')}", '${rootView.extjsDomain}')
    var atsext = extjsf.bind("${z:vid(v, 'good-attrs-ext')}", '${rootView.extjsDomain}')
    var atsbtn = extjsf.bind("${z:vid(v, 'show-attrs')}", '${rootView.extjsDomain}')
    var submit = extjsf.bind("${z:vid(v, 'submit')}", '${rootView.extjsDomain}')
    var gocalc = extjsf.bind("${z:vid(v, 'goto-calc')}", '${rootView.extjsDomain}')
    var sattrs = extjsf.bind("${z:vid(v, 'goodAttrs')}", '${rootView.extjsDomain}')

    function adjustWindow()
    {
      //~: adjust window height
      ReTrade.desktop.resizeToHeight('winmain',
        { domain: '${rootView.extjsDomain}', '+hpt': 16, force: true },
        [ "${z:vid(v, '_add_to_selset')}",
          "${z:vid(v, '_group')}",
          "${z:vid(v, '_code_measure')}"
        ]
      )

      //~: set window width
      ReTrade.desktop.applyWindowBox({
        name: 'winmain', domain: '${rootView.extjsDomain}',
        widthpt: 320, prevsize: ''
      })
    }

    //~: display notification about restricted editing
    if(extjsf.bind("${z:vid(v, 'good_used')}", '${rootView.extjsDomain}')) checkGoodUsed = function()
    {
        jQuery.get("${z:url('/go/web/views/goods/is-good-used')}",
                   { entity: "#{v.goodView.objectKey}" },  function(x)
        {
          if(ZeTS.ises(x) || !ZeT.isi(x = parseInt(x)) || (x === 0))
          {
            //~: enable editing the measure
            if(x === 0) extjsf.co("${z:vid(v, 'measure')}", '${rootView.extjsDomain}').setReadOnly(false)
            return
          }

          //~: usage description text
          var s = retrade.goodUsageDescr(x)

          $('#' + "${z:vid(v, 'good-used')}").text(s)
          extjsf.co("${z:vid(v, 'good_used')}", '${rootView.extjsDomain}').show()
          adjustWindow()
        })
    }

    function toggleReadWrite(isread)
    {
      //~: toggle the form fields
      form.isReadMode = isReadMode = isread
      form.toggleReadWrite(isread)

      //~: toggle cancel-edit
      extjsf.bind("${z:vid(v, 'cancel-edit')}", '${rootView.extjsDomain}').visible(!isread)

      //~: toggle close
      extjsf.bind("${z:vid(v, 'close')}", '${rootView.extjsDomain}').visible(isread)

      //~: toggle submit
      submit.visible(!isread)

      //~: toggle do-edit
      extjsf.bind("${z:vid(v, 'do-edit')}", '${rootView.extjsDomain}').visible(isread)

      //~: show go-to-calc
      if(!isread) gocalc.visible(true)

      //~: window title
      var winmain = extjsf.bind('winmain', '${rootView.extjsDomain}').co()
      if(isread) winmain.setTitle('${z:jss(v.infoWindowTitle)}')
      else winmain.setTitle('${z:jss(v.editWindowTitle)}')

      //~: set measure text value
      var measure = extjsf.bind("${z:vid(v, 'measure')}", '${rootView.extjsDomain}')
      extjsf.co("${z:vid(v, 'measures')}", '${rootView.extjsDomain}').load({callback: function()
      {
        measure.value("#{v.goodView.measureKey}")
      }})

      //~: allow editing when create
      if(("#{v.creating}" == 'true') && !isread)
        measure.co().setReadOnly(false)

      //~: load groups
      if(!isread) extjsf.co("${z:vid(v, 'groups')}", '${rootView.extjsDomain}').load()

      //~: edit mode field
      extjsf.bind("${z:vid(v, 'edit')}", '${rootView.extjsDomain}').value(!isread)

      //~: check good usage
      if(!isread && checkGoodUsed) checkGoodUsed()
    }

    //~: initial adjust
    Ext.onReady(ZeT.timeouted(150, adjustWindow))

    //~: default read-only for existing
    Ext.onReady(function()
    {
      toggleReadWrite("#{v.model.editMode}" == 'false')
    })

    //~: do-edit button
    extjsf.bindHandler("${z:vid(v, 'do-edit')}", '${rootView.extjsDomain}', function()
    {
      toggleAttributes(false)
      toggleReadWrite(false)
    })

    var ox = "#{z:jss(v.goodView.oxString)}"

    function toggleAttributes(on)
    {
      if(ZeT.isb(on)) atsbtn.co().setPressed(on); else
        on = atsbtn.co().pressed

      form.visible(!on)
      gocalc.visible(!isReadMode && !on)
      submit.visible(!isReadMode && !on)
      status.visible(!on)
      atsext.visible(on)

      //~: adapt the height of the window
      if(on)
        ReTrade.desktop.applyWindowBox({
          name: 'winmain', domain: '${rootView.extjsDomain}',
          prevsize: 'good-attrs', heightpt: 280,
          widthpt: (isReadMode)?(undefined):(420)
        })
      else
        ReTrade.desktop.prevsizeComp({
          name: 'winmain', domain: '${rootView.extjsDomain}',
          marker: 'good-attrs'
        })

      //?: {turn on the table}
      if(on)
      {
        if(!ZeTS.ises(ox)) ox = ZeT.s2o(ox)
        sattrs.updateGoodOx(ox, isReadMode)
      }
    }

    //~: toggle attributes view
    atsbtn.on('toggle', toggleAttributes)
  })

  //]]>
  </script>

  <!-- good edit form] -->

</x:winmain>
</ui:define>
</ui:decorate>

<ui:decorate template = '/resources/.view-modes/body_post.xhtml'
   xmlns    = 'http://tverts.com/retrade/webapp/response'
   xmlns:ui = 'http://java.sun.com/jsf/facelets'>

  <ui:define name = 'validation'>
    <validation success = "#{v.formValid}">

      <ui:fragment rendered = "#{v.codeExists}">
        <field target = "${z:vid(v, 'code')}">
          <error>Указанный код уже используется в другом Товаре!</error>
        </field>
      </ui:fragment>

    </validation>
  </ui:define>

  <ui:define name = 'scripts'>

   <ui:fragment rendered = "#{not empty v.goodAddedKey and v.model.selSetAble}">
   <script>
   //<![CDATA[

 ReTrade.selset.items([#{v.goodAddedKey}], true).reloadStore()

   //]]>
   </script>
   </ui:fragment>
  </ui:define>
</ui:decorate>
</ui:component>