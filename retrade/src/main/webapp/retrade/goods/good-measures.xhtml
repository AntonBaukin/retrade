<?xml version = '1.0' encoding = 'UTF-8'?>

<ui:component xmlns:ui = 'http://java.sun.com/jsf/facelets'
  xmlns:c  = 'http://java.sun.com/jsp/jstl/core'
  xmlns:f  = 'http://java.sun.com/jsf/core'
  xmlns:z  = 'uri:tverts.com'>

<c:set var = "v" scope = "request" value = "${facesGoodEditView}"/>

<ui:decorate template = '/resources/.view-modes/body.xhtml'
   xmlns    = 'http://www.w3.org/1999/xhtml'
   xmlns:h  = 'http://java.sun.com/jsf/html'
   xmlns:x  = 'http://java.sun.com/jsf/composite/.xhtml'>

<ui:define name = 'page_body'>

<x:winmain coid = "${z:vid(v, 'root_panel')}">

  <script type = "text/javascript">
  //<![CDATA[

    extjsf.co('winmain', '${rootView.extjsDomain}').
      setTitle("#{z:jss(v.measuresWindowTitle)}")

    ReTrade.desktop.prevsizeComp({ marker: 'measures',
      name: 'winmain', domain: '${rootView.extjsDomain}'
    })

  //]]>
  </script>

  <f:facet name = "extjs-props">
    bodyCls: 'retrade-back-panel',
    layout: { type: 'vbox', align: 'stretch' }
  </f:facet>

  <f:facet name = "toolbar-props">
    xtype: 'panel', bodyPadding: extjsf.pt(2),
    layout: {type: 'hbox', align: 'middle'},
    bodyCls: 'retrade-toolbar-panel'
  </f:facet>


  <!-- [toolbar -->

  <f:facet name = "toolbar">

    <!-- [goto good edit button] -->

    <x:winaction-button coid = "${z:vid(v, 'goto_back')}"
      action = "#{v.gotoWhere('measures-back')}">

      <f:facet name = "extjs-props">
        text: 'Назад'
      </f:facet>

      <f:facet name = "action-params">
        '${v.modelParam}': '#{v.modelKeys}'
      </f:facet>
    </x:winaction-button>

  </f:facet>

  <!-- toolbar] -->


  <!-- [measures list -->

  <x:component coid = "${z:vid(v, 'measures-list-panel')}">
    <f:facet name = "extjs-props">

      flex: 1, scrollable: 'y',
      bodyPadding: extjsf.pt(2),
      bodyCls: 'retrade-transparent-panel',
      layout: { type: 'vbox', align: 'stretch' }

    </f:facet>
  </x:component>

  <!-- measures list] -->

  <!-- [measure item template -->

  <style type="text/css">

.retrade-good-measures-item
{
  width: 100%; padding: 4pt;
  border-radius: 4px;
}

.retrade-good-measures-item table
{
  width: 0%;
}

.retrade-good-measures-item > tbody > tr:first-child td
{
  text-align: center; padding-bottom: 2pt;
}

.retrade-good-measures-item tr table
{
  margin-top: 2pt;
}

.retrade-good-measures-item .item-caption
{
  text-align: center; padding-bottom: 4pt;
}

.retrade-good-measures-item .check-title
{
  padding: 0 4pt 0 2pt;
}

  </style>

  <div style = "display:none">
    <table id = "${z:vid(v, 'measure-item-template')}"
      cellspacing = "0" cellpadding = "0" border = "0"
      class = "retrade-good-measures-item retrade-item-panel">

      <tbody>
      <tr>
        <td class = "retrade-info-title item-caption">
          <div><span>@MT</span> единица измерения</div>
        </td>
      </tr>
      <tr>
        <td>
          <table cellspacing = "0" cellpadding = "0" border = "0">
            <tr>
              <td class = "retrade-info-title"><div>Код</div></td>
              <td class = "retrade-info-value"><div>@MC</div></td>
              <td class = "retrade-info-title"><div>Имя</div></td>
              <td class = "retrade-info-value"><div>@MN</div></td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>
          <table cellspacing = "0" cellpadding = "0" border = "0">
            <tr>
              <td class = "retrade-info-title">@Cc<div>Океи</div></td>
              <td class = "retrade-info-value"><div>@CC</div></td>
              <td class = "retrade-info-title">@Vo<div>Коэфф.</div></td>
              <td class = "retrade-info-value retrade-info-red"><div>@VO</div></td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>
          <table cellspacing = "0" cellpadding = "0" border = "0">
            <tr>
              <td class = "retrade-info-title"><div>Вес нетто</div></td>
              <td class = "retrade-info-value"><div>@NW</div></td>
              <td class = "retrade-info-title"><div>кг, брутто</div></td>
              <td class = "retrade-info-value"><div>@GW</div></td>
              <td class = "retrade-info-title"><div>кг</div></td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>
          <table cellspacing = "0" cellpadding = "0" border = "0">
            <tr>
              <td class = "retrade-info-title"><div>Бар-код</div></td>
              <td class = "retrade-info-value"><div>@BC</div></td>
            </tr>
          </table>
        </td>
      </tr>
      <tr>
        <td>
          <table cellspacing = "0" cellpadding = "0" border = "0">
            <tr>
              <td>@XB</td> <td class = "check-title">@LB</td>
              <td>@XS</td> <td class = "check-title">@LS</td>
              <td>@XL</td> <td class = "check-title">@LL</td>
              <td>@XR</td> <td class = "check-title">@LR</td>
            </tr>
          </table>
        </td>
      </tr>
      </tbody>
    </table>
  </div>

  <!-- measure item template] -->

  <script type = "text/javascript">
  //<![CDATA[

  ZeT.scope(function()
  {
    var measures = ZeT.s2o("#{z:jss(v.measuresEncoded)}")
    var panel    = extjsf.bind("${z:vid(v, 'measures-list-panel')}", '${rootView.extjsDomain}')

    //~: apply the model items
    panel.on('afterrender', fillMeasures)

    //~: make the window higher
    ReTrade.desktop.applyWindowBox({
      name: 'winmain', domain: '${rootView.extjsDomain}',
      heightpt: 320, prevsize: 'measures'
    })

    function fillMeasures()
    {
      var _xid = 0, stime = 'measures-' + new Date().getTime() + '-'
      function xid() { return stime + (_xid++) }

      //~: items template
      var tx = new ZeT.Layout.Template(
        { trace : ZeT.Layout.Template.Ways.traceAtNodes },
        ZeTD.n("${z:vid(v, 'measure-item-template')}")
      )

      //~: clear the existing content
      panel.co().removeAll(true)

      //c: for each measures: add items
      ZeT.each(ZeT.asserta(measures), function(m, index)
      {
        //ZeT.log(m.good)
        //ZeT.log(m.measure)
        //ZeT.log(m.calc)

        //~: panel container
        var p = { xtype: 'panel', border: false, layout: 'fit',
          margin: (index)?(extjsf.pts(6, 0, 0, 0)):(0),
          bodyCls: 'retrade-transparent-panel'
        }

        var clcode = m.measure['class-code']
        if(ZeTS.ises(clcode)) clcode = null

        var volume = m.calc && m.calc['sub-volume']
        if(volume) volume = '' + volume
        if(ZeTS.ises(volume)) volume = null

        //~: item content
        var c = {
          MT: (!index)?('Основная'):('Дополнительная'),
          MC: m.measure.code, MN: m.measure.name,
          Cc: { hidden: !clcode }, CC: { phidden: !clcode, node: clcode },
          Vo: { hidden: !volume }, VO: { phidden: !volume, node: volume },
          NW: m.good['net-weight'], GW: m.good['gross-weight'],
          BC: m.good['bar-code']
        }

        //~: clone & fill item
        p.html = tx.cloneNode()
        tx.fillWays(p.html, c)

        //~: add it to the root
        p.html = p.html.outerHTML
        panel.co().add(p = Ext.create(p))

        //~: process table components
        p.on('afterrender', function()
        {
          var ways  = tx.walkAll(p.body.dom.firstChild)

          var items = [
            { way: ways.XB, lway: ways.LB, label: 'накл. зак.', id: xid(), index: 'visible-buy' },
            { way: ways.XS, lway: ways.LS, label: 'накл. про.', id: xid(), index: 'visible-sell' },
            { way: ways.XL, lway: ways.LL, label: 'списки', id: xid(), index: 'visible-lists' },
            { way: ways.XR, lway: ways.LR, label: 'отчёты', id: xid(), index: 'visible-reports' }
          ]

          //~: visibility check boxes
          ZeT.each(items, function(x)
          {
            Ext.create({ xtype: 'checkbox', renderTo: x.way, inputId: x.id,
              margin: 0, padding: 0, value: m.good[x.index] })
            Ext.create({ xtype: 'label', renderTo: x.lway, text: x.label,
              forId: x.id, cls: 'retrade-form-light-label-cell' })
          })
        })
      })
    }
  })
  //]]>
  </script>

</x:winmain>
</ui:define>
</ui:decorate>
</ui:component>