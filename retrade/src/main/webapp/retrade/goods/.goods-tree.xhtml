<ui:decorate template = '/resources/.view-modes/body.xhtml'
   xmlns    = 'http://www.w3.org/1999/xhtml'
   xmlns:c  = 'http://java.sun.com/jsp/jstl/core'
   xmlns:f  = 'http://java.sun.com/jsf/core'
   xmlns:h  = 'http://java.sun.com/jsf/html'
   xmlns:ui = 'http://java.sun.com/jsf/facelets'
   xmlns:x  = 'http://java.sun.com/jsf/composite/.xhtml'>

<ui:define name = 'page_body'>

<x:root-panel coid = "${z:vid(v, 'goods_tree_panel')}">

  <f:facet name = "extjs-props">
    title: '#{z:jss(panelTitle)}',
    layout: {type: 'vbox', align: 'stretch'}
  </f:facet>


  <!-- [tree toolbar -->

  <f:facet name = "toolbar-props">

    xtype: 'panel', bodyPadding: extjsf.pt(2),
    layout: {type: 'hbox', align: 'middle'},
    bodyCls: 'retrade-toolbar-inline-panel',
    bodyPadding: extjsf.pt(2)

  </f:facet>

  <f:facet name = "toolbar">

    <!-- [expand the tree] -->

    <x:component coid = "${z:vid(v, 'expand-tree')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Раскрыть',
        tooltipType: 'title', tooltip: 'Раскрыть дерево, отобразив все каталоги'
      </f:facet>
    </x:component>


    <!-- [collapse the tree] -->

    <x:component coid = "${z:vid(v, 'collapse-tree')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Свернуть',
        margin: extjsf.pts(0, 4, 0, 4), tooltipType: 'title',
        tooltip: 'Свернуть все каталоги дерева, отобразив путь к выбранному'
      </f:facet>
    </x:component>


    <x:component coid = "${z:vid(v, '_tb_fill_0')}">
      <f:facet name = "extjs-props">
        xtype: 'panel', flex: 1, frame: false, border: false,
        bodyCls: 'retrade-toolbar-inline-panel'
      </f:facet>
    </x:component>


    <ui:fragment rendered = "#{canEditTree}">

    <!-- [cut node] -->

    <x:component coid = "${z:vid(v, 'tree-cut')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Вырезать',
        margin: extjsf.pts(0, 4, 0, 0), tooltipType: 'title',
        tooltip: 'Вырезать каталог, чтобы вставить его в другой каталог дерева'
      </f:facet>
    </x:component>


    <!-- [cut node cancel] -->

    <x:component coid = "${z:vid(v, 'tree-cut-cancel')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Отм. выр.', hidden: true,
        margin: extjsf.pts(0, 4, 0, 0), tooltipType: 'title',
        tooltip: 'Отменить вырезание каталога'
      </f:facet>
    </x:component>


    <!-- [paste node as child] -->

    <x:component coid = "${z:vid(v, 'tree-paste-child')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Вст. вниз', hidden: true,
        margin: extjsf.pts(0, 4, 0, 0), tooltipType: 'title',
        tooltip: 'Вставить вырезанный каталог как последний дочерний выделеного каталога'
      </f:facet>
    </x:component>


    <!-- [paste node as prev] -->

    <x:component coid = "${z:vid(v, 'tree-paste-prev')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Вст. рядом', hidden: true,
        margin: extjsf.pts(0, 4, 0, 0), tooltipType: 'title',
        tooltip: 'Вставить вырезанный каталог на уровне выделеного каталога'
      </f:facet>
    </x:component>


    <!-- [add empty node] -->

    <x:component coid = "${z:vid(v, 'tree-add')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Добавить', margin: extjsf.pts(0, 4, 0, 0),
        tooltipType: 'title', tooltip: 'Добавить новый каталог как дочерний к выбранному'
      </f:facet>
    </x:component>


    <!-- [commit tree changes button] -->

    <x:component coid = "${z:vid(v, 'tree-commit')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Сохранить', disabled: true,
        tooltipType: 'title', tooltip: 'Сохранить накопленные изменения'
      </f:facet>
    </x:component>

    </ui:fragment>
  </f:facet>


  <!-- tree toolbar] -->


  <!-- [tree (flat) data -->

  <x:data-store storeId = "${z:vid(v, 'goodsTreeData')}"
    modelView = "${v}" modelRequest = "tree" pageSize = "0">

    <f:facet name = "store-props">
      model: 'retrade.model.CatItemTree', autoLoad: false
    </f:facet>

    <f:facet name = "proxy-props">
      reader: ZeT.defined('retrade.readers.CatItemTree')
    </f:facet>
  </x:data-store>

  <!-- tree (flat) data] -->


  <script type = "text/javascript">
  //<![CDATA[

  //~: tree creation script
  Ext.onReady(function()
  {
    //~: store with tree flat data
    var store = extjsf.component("${z:vid(v, 'goodsTreeData')}", '${rootView.extjsDomain}');

    //~: create tree store
    var tree  = Ext.create('Ext.data.TreeStore', {
      storeId: "${z:vid(v, 'goodsTreeStore')}",
      data: [], proxy: {type: 'memory'}
    })

    //~: delete store on domain delete
    extjsf.onDomainDelete('${rootView.extjsDomain}', function()
    {
        Ext.data.StoreManager.unregister("${z:vid(v, 'goodsTreeStore')}")
    })

    function nodesSorter(l, r)
    {
      var lc = l.get('code').toLowerCase(); if(!lc) lc = '';
      var rc = r.get('code').toLowerCase(); if(!rc) rc = '';

      while(lc.length < rc.length) lc += ' ';
      while(rc.length < lc.length) rc += ' ';

      return lc.localeCompare(rc);
    }

    function onNodeMoved(n, op, np)
    {
      var m = store.getById(n.get('modelId'));
      if(!m || (m.get('parentKey') == np.get('modelId'))) return;

      m.set('parentKey', np.get('modelId'))
      np.sort(nodesSorter, true)
      extjsf.component("${z:vid(v, 'tree-commit')}", '${rootView.extjsDomain}').setDisabled(false)
    }

    function doResizeColumn()
    {
      var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}');
      var col  = extjsf.support.columnByType(tree, 'treecolumn');
      col.setWidth(tree.getView().getMaxContentWidth(col) + 4)
    }

    var selNode;

    function createNode(map, k, pn)
    {
      var m = map[k].m
      var n = pn.appendChild({})

      n.set('modelId', k)
      n.set('selsetItemKey', k)
      n.set('code', m.get('code'))
      n.set('name', m.get('name'))
      n.set('leaf', !ZeT.isa(map[k].cs) || !map[k].cs.length)

      if(store.retradeLastSelection == m.get('code')) selNode = n

      n.on('move', onNodeMoved)
      n.on('expand', doResizeColumn)
      n.on('collapse', doResizeColumn)

      if(map[k].cs) Ext.Array.each(map[k].cs, function(c)
      {
         createNode(map, c, n)
      })
    }

    function createRootNode(map)
    {
       var n = tree.setRootNode({ leaf: false, expanded: true });

       n.set('modelId', '$')
       n.set('selsetDisabled', true)
       n.set('name', '[Корень каталога]')

       if(map[''].cs) Ext.Array.each(map[''].cs, function(c)
       {
          createNode(map, c, n)
       })

       n.sort(nodesSorter, true)
       n.on('expand', doResizeColumn)
       n.on('collapse', doResizeColumn)

       return n;
    }

    store.on('load', function(store, rows)
    {
       var map = {};

       //~: map the rows
       Ext.Array.each(rows, function(m)
       {
         var k = m.get('objectKey');
         var p = m.get('parentKey'); if(!p) p = '';

         if(!map[p]) map[p] = { k: p };
         if(!map[p].cs) map[p].cs = [ k ]; else map[p].cs.push(k)
         map[k] = ZeT.extend(map[k], { k: k, p: p, m: m });
       })

       //~: create root node
       if(!map['']) map[''] = { k: '' }
       var root = createRootNode(map);

       //~: restore previous selection
       store.retradeLastSelection = null;
       if(selNode)
       {
         extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
           getSelectionModel().select([selNode])

         while(selNode.parentNode)
         {
           selNode.parentNode.expand()
           selNode = selNode.parentNode
         }
       }

       //~: resize tree column
       doResizeColumn()

       //~: select the root
       ZeT.timeout(250, function()
       {
         extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
           getSelectionModel().select(root)
       })
    })


    //!: load the store
    store.load()
  })

  //~: expand the tree
  extjsf.bindHandler("${z:vid(v, 'expand-tree')}", '${rootView.extjsDomain}', function()
  {
    var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}')
    tree.getRootNode().expandChildren(true)
  })

  //~: expand the tree to the selection
  extjsf.bindHandler("${z:vid(v, 'collapse-tree')}", '${rootView.extjsDomain}', function()
  {
    var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}');
    var sel  = tree.getSelectionModel().getSelection(); sel = sel.length && sel[0];

    tree.collapseAll(function()
    {
       if(sel) while(sel.parentNode)
       {
         sel.parentNode.expand()
         sel = sel.parentNode;
       }
    })

  })

  //]]>
  </script>


  <!-- [tree commit script] -->

  <ui:fragment rendered = "#{canEditTree}">

  <x:action-call coid = "${z:vid(v, 'tree-commit-script')}"
    action = "#{v.doCommitTreeEdit}">

    <f:facet name = "action-params">
      '${v.modelParam}': '${v.modelKeys}'
    </f:facet>
  </x:action-call>

  <script type = "text/javascript">
  //<![CDATA[

  //~: add to the tree
  extjsf.bindHandler("${z:vid(v, 'tree-add')}", '${rootView.extjsDomain}', function()
  {
    var store = extjsf.component("${z:vid(v, 'goodsTreeData')}", '${rootView.extjsDomain}');
    var tree  = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}');

    var sel   = tree.getSelectionModel().getSelection(); sel = sel.length && sel[0];
    if(!sel) sel = tree.getRootNode();

    var m = Ext.create('retrade.model.CatItemTree', {
      objectKey: '$' + new Date().getTime(),
      parentKey: sel.get('modelId'),
      code: '', name: ''
    })

    store.add(m)

    var n = sel.insertChild(0, {
      modelId: m.getId(), leaf: true, code: '', name: ''
    })

    sel.expand()
    tree.getSelectionModel().select(n)
  })

  //~: commit the tree
  extjsf.bindHandler("${z:vid(v, 'tree-commit')}", '${rootView.extjsDomain}', function()
  {
    //~: store with tree flat data
    var store   = extjsf.component("${z:vid(v, 'goodsTreeData')}", '${rootView.extjsDomain}');

    //~: collect modifications
    var records = store.getModifiedRecords(); if(!records.length) return;
    var params  = {};

    //~: find codes of all records
    var codes   = {};
    for(var i = 0;(i < store.getCount());i++) try
    {
      var code = store.getAt(i).get('code');
      if(!code || !code.length) continue;

      //?: {code is repeated}
      if(codes[code])
        throw ZeTS.cat('Код каталога [', code, '] указан несколько раз!')
      codes[code] = true;
    }
    catch(e)
    {
      ReTrade.desktop.error(e)
      return
    }

    //c: process the updates
    for(i = 0;(i < records.length);i++) try
    {
      var m = records[i];

      //?: {empty code}
      if(ZeTS.ises(m.get('code')))
        throw 'Код каталога не может быть пустым!'

      //?: {empty name}
      if(ZeTS.ises(m.get('name')))
        throw 'Имя каталога не может быть пустым!'

      params['treeFolderKey'    + i] = m.getId();
      params['treeFolderCode'   + i] = m.get('code');
      params['treeFolderName'   + i] = m.get('name');
      params['treeFolderParent' + i] = m.get('parentKey');
    }
    catch(e)
    {
      ReTrade.desktop.error(e)
      return
    }

    //~: disable the commit button
    extjsf.component("${z:vid(v, 'tree-commit')}", '${rootView.extjsDomain}').setDisabled(true)

    //~: current selection
    var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').getView();
    var sel  = tree.getSelectionModel().getSelection(); sel = sel.length && sel[0];

    //!: send to the server
    extjsf.bindHandler("${z:vid(v, 'tree-commit-script')}", '${rootView.extjsDomain}')({
      params: params, success: function()
      {
        store.retradeLastSelection = sel && sel.get('code');
        store.reload()
      }
    })

  })

  //~: tree cut show-hide
  extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').retradeEnableCutPaste = function(x)
  {
    var BTNS = [
      "${z:vid(v, 'tree-cut-cancel')}",
      "${z:vid(v, 'tree-paste-child')}",
      "${z:vid(v, 'tree-paste-prev')}"
    ];

    var ctl = extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}');

    //~: hide cut button
    ctl.component().setVisible(!x)

    //show the related buttons
    for(var i = 0;(i < BTNS.length);i++)
      extjsf.component(BTNS[i], '${rootView.extjsDomain}').setVisible(x)
  }

  extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').retradeShowNode = function(node, v)
  {
    if(v) node.getOwnerTree().getView().removeRowCls(node, 'retrade-almost-opaque')
    else  node.getOwnerTree().getView().addRowCls(node, 'retrade-almost-opaque')
  }

  //~: tree cut button
  extjsf.bindHandler("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}', function()
  {
    var ctl = extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}');

    //~: enable cut
    ctl.retradeEnableCutPaste(true)

    //?: {has a node cut} show it back
    if(ctl.retradeNodeCut) ctl.retradeShowNode(ctl.retradeNodeCut, true)
    ctl.retradeNodeCut = null;

    //~: selected folder
    var sel = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
      getSelectionModel().getSelection();
    if(sel && (sel.length == 1)) sel = sel[0];

    //?: {not a valid folder selected}
    if(!sel || (sel.get('modelId') == '$'))
    {
      ctl.retradeEnableCutPaste(false)
      return;
    }

    //~: hide current node
    ctl.retradeShowNode(ctl.retradeNodeCut = sel, false)
  })

  //~: tree cut cancel button
  extjsf.bindHandler("${z:vid(v, 'tree-cut-cancel')}", '${rootView.extjsDomain}', function()
  {
    var ctl = extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}');

    //~: disable cut
    ctl.retradeEnableCutPaste(false)

    //?: {has a node cut} show it back
    if(ctl.retradeNodeCut) ctl.retradeShowNode(ctl.retradeNodeCut, true)
    ctl.retradeNodeCut = null;
  })

  //~: tree paste general function
  extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').retradePasteNode = function(xyz)
  {
    var ctl = extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}');

    //~: disable cut
    ctl.retradeEnableCutPaste(false)

    //?: {has no node cut} do nothing
    var cut = ctl.retradeNodeCut; if(!cut) return
    ctl.retradeNodeCut = null;

    //~: show it back
    ctl.retradeShowNode(cut, true)

    //~: selected folder
    var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}');
    var sel  = tree.getSelectionModel().getSelection();
    if(sel && (sel.length == 1)) sel = sel[0];

    //?: {there is no current selection | selected the same node}
    if(!sel || (sel == cut)) return

    //?: {selected in the same sub-tree]
    if(cut.contains(sel)) return

    //?: {append as the child}
    if(xyz == 'child')
    {
      sel.expand()
      sel.appendChild(cut)
    }

    //?: {insert before}
    else if(xyz == 'prev')
    {
      //?: {is a root node}
      if(!sel.parentNode) return

      sel.parentNode.expand()
      sel.parentNode.insertBefore(cut, sel)
    }

    //~: resize the column
    var col  = extjsf.support.columnByType(tree, 'treecolumn');
    col.setWidth(tree.getView().getMaxContentWidth(col) + 4)
  }

  //~: tree paste down button
  extjsf.bindHandler("${z:vid(v, 'tree-paste-child')}", '${rootView.extjsDomain}', function()
  {
    extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').
      retradePasteNode('child')
  })

  //~: tree paste before button
  extjsf.bindHandler("${z:vid(v, 'tree-paste-prev')}", '${rootView.extjsDomain}', function()
  {
    extjsf.bind("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').
      retradePasteNode('prev')
  })

  //]]>
  </script>
  </ui:fragment>


  <!-- [tree with goods folders -->

  <x:component coid = "${z:vid(v, 'tree')}">
    <f:facet name = "extjs-props">

      xtype: 'treepanel', store: "${z:vid(v, 'goodsTreeStore')}",
      border: false, flex: 1, rootVisible : true, animate: false,
      enableColumnHide: false, sortableColumns: false,
      selectModel: extjsf.delayCreate('Ext.selection.RowModel', {mode: 'SINGLE'}),
      cls: 'ux-grid-not-mark-dirty ux-tree-folders-only',

      <ui:fragment rendered = "#{canEditTree}">

      viewConfig: { plugins: [
        { ptype: 'treeviewdragdrop', containerScroll: true, appendOnly: true },
      ]},

      plugins: [{ ptype: 'cellediting', pluginId: 'cellediting', listeners: {

        beforeedit: function(ed, e)
        {
           if(e.record.get('modelId') == '$') return false;
        }
      }}],

      </ui:fragment>

      columns: [

        { xtype: 'treecolumn', width: 64, resizable: false },

        { text: "Код", dataIndex: 'code', width: extjsf.ex(16)
           #{canEditTree?(", editor: 'textfield'"):('')} },

        { text: "Наименование", dataIndex: 'name', flex: 1
          #{canEditTree?(", editor: 'textfield'"):('')} }
      ]

    </f:facet>
  </x:component>

  <script type = "text/javascript">
  //<![CDATA[

  //~: single click expand-collapse
  extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').on('add', function(tree)
  {
    var expandSelected, expandTime = 0;

    //~: listen expand-collapse click
    tree.getView().on('beforecellmousedown', function(tree2, td, ci, node, tr, ri, e)
    {
      var sel = tree.getSelectionModel().getLastSelected();

      //?: {is not a tree special column}
      var cs = extjsf.support.gridColumns(tree, false)
      if(cs[ci].xtype != 'treecolumn')
      {
        //?: {table cell second click to start editing}
        if(('#{canEditTree}' == 'true') && (sel === node) && (node.get('modelId') != '$'))
        {
          var p = tree.getPlugin('cellediting');

          ZeT.timeout(200, function()
          {
            p.startEditByPosition({ row: ri, column: ci })
          })
        }

        return
      }

      //?: {is not expander icon}
      if(node.isExpandable())
        if(!Ext.get(e.getTarget()).hasCls('x-tree-expander'))
        {
          if(node.isExpanded()) node.collapse(); else node.expand()
          expandTime = new Date().getTime();
          expandSelected = tree.getSelectionModel().getLastSelected();
        }
    })

    //~: listen selection change
    tree.on('beforeselect', function(tree2, node)
    {
      var ts = new Date().getTime() - expandTime;

      //?: {prevent selection}
      if(ts < 200)
      {
        if(expandSelected)
          tree.getSelectionModel().select(expandSelected, false, true)
        return false
      }
    })
  })

  //]]>
  </script>

  <ui:fragment rendered = "#{canEditTree}">
  <script type = "text/javascript">
  //<![CDATA[

  //~: after tree cell edited
  extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').on('edit', function(ed, e)
  {
    var store = extjsf.component("${z:vid(v, 'goodsTreeData')}", '${rootView.extjsDomain}');
    var m = store.getById(e.record.get('modelId')); if(!m) return;
    var v = ZeTS.trim(e.value);

    if(m.get(e.field) == v) return;

    m.set(e.field, v)
    extjsf.component("${z:vid(v, 'tree-commit')}", '${rootView.extjsDomain}').setDisabled(false)
    extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeSetGoodsPanelTitle(e.record)
  })

  //]]>
  </script>
  </ui:fragment>

  <!-- tree with goods folders] -->


  <x:component coid = "${z:vid(v, '_folder_goods_spliter')}">
    <f:facet name = "extjs-props">
      xtype: 'splitter', collapsible: true, collapseTarget: 'prev'
    </f:facet>
  </x:component>


  <!-- [grid with folder goods -->

  <x:data-store storeId = "${z:vid(v, 'folderGoodsStore')}"
    modelView = "${v}" modelRequest = "goods" pageSize = "10">

    <f:facet name = "store-props">
      model: '#{goodsModel}',
      autoLoad: false, remoteSort: true,
      sorters: [{ property: 'goodName', direction: 'ASC' }]
    </f:facet>

    <f:facet name = "proxy-props">
      reader: ZeT.defined('retrade.readers.GoodUnitView')
    </f:facet>
  </x:data-store>

  <x:component coid = "${z:vid(v, 'folder-goods-layout')}">

    <f:facet name = "extjs-props">

      <ui:fragment rendered = "#{canEditTree}">
      collapseFirst: false,  tools: [{
        type: 'search', tooltipType: 'title', tooltip: 'Отобразить инструменты поиска',
        handler: function()
        {
          var bs = extjsf.component("${z:vid(v, 'goods-edit-buttons')}", '${rootView.extjsDomain}')
          var fi = extjsf.component("${z:vid(v, 'goods-filter')}", '${rootView.extjsDomain}')

          bs.setVisible(!bs.isVisible())
          fi.setVisible(!fi.isVisible())
        }
      }],
      </ui:fragment>

      xtype: 'panel', flex: 1, border: false, layout: 'fit',
      collapsible: true, collapseDirection: 'bottom',
      bodyCls: 'retrade-back-panel',
      title: 'Выберете каталог в дереве'
    </f:facet>


    <!-- [goods table panel -->

    <x:component coid = "${z:vid(v, 'folder-goods-panel')}">
      <f:facet name = "extjs-props">
        xtype: 'panel', border: false, layout: 'fit', hidden: true,
        bodyPadding: extjsf.pt(1), bodyCls: 'retrade-transparent-panel'
      </f:facet>


      <!-- [goods panel toolbar -->

      <x:toolbar coid = "${z:vid(v, 'folder-goods-toolbar')}">
        <f:facet name = "extjs-props">

          xtype: 'panel', bodyPadding: extjsf.pt(2),
          layout: { type: 'hbox', align: 'middle' },
          bodyCls: 'retrade-toolbar-inline-panel'

        </f:facet>


        <ui:fragment rendered = "#{canEditTree}">

        <x:component coid = "${z:vid(v, 'goods-edit-buttons')}">
          <f:facet name = "extjs-props">
            xtype: 'panel', bodyCls: 'retrade-transparent-panel',
            border: false, layout: {type: 'hbox', align: 'middle'}
          </f:facet>

          <!-- [add goods to selected node] -->
          <x:component coid = "${z:vid(v, 'tree-add-goods')}">
            <f:facet name = "extjs-props">
              xtype: 'button', text: 'Добавить',
              margin: extjsf.pts(0, 4, 0, 0),
              tooltipType: 'title', tooltip: 'Добавить товары текущей выборки в указанный каталог'
            </f:facet>
          </x:component>


          <!-- [move goods to selected node] -->
          <x:component coid = "${z:vid(v, 'tree-move-goods')}">
            <f:facet name = "extjs-props">
              xtype: 'button', text: 'Переместить',
              margin: extjsf.pts(0, 4, 0, 0),
              tooltipType: 'title', tooltip: 'Переместить товары текущей выборки в указанный каталог'
            </f:facet>
          </x:component>


          <!-- [unlink goods from selected node] -->
          <x:component coid = "${z:vid(v, 'tree-unlink-goods')}">
            <f:facet name = "extjs-props">
              xtype: 'button', text: 'Изъять',
              margin: extjsf.pts(0, 4, 0, 0),
              tooltipType: 'title', tooltip: 'Изъять товары текущей выборки из указанного каталога'
            </f:facet>
          </x:component>

        </x:component>
        </ui:fragment>


        <ui:fragment rendered = "#{canEditGoods}">

        <!-- [add-edit good -->

      <x:component coid = "${z:vid(v, 'add-good')}">
        <f:facet name = "extjs-props">
         xtype: 'button', text: 'Создать',
         tooltipType: 'title', tooltip: 'Создать новый товар и поместить его в каталог (указанный на момент открытия формы)',
         disabled: ${not rootView.isSecure('edit: goods')}
       </f:facet>
      </x:component>

      <script type = "text/javascript">
      //<![CDATA[

  extjsf.bind("${z:vid(v, 'add-good')}", '${rootView.extjsDomain}').retradeOpenGoodWindow = function(record, e)
  {
    var dk  = "${z:vid(v, 'add-good')}:"
    if(record) dk = dk.replace('add-', 'create-')

    var ps = { disableSelSet: true }
    if(!record) ps.create = true

    //~: add the folder selected
    var fld  = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
      getSelectionModel().getSelection()
    if(fld && (fld.length == 1)) fld = fld[0] && fld[0].get('modelId')
    if(fld && fld.length && (fld.charAt(0) != '$'))
      ps.goodsFolder = fld

    //~: open the window
    var winmain; winmain = retrade_open_window({ url: '/goods/edit-good',
      box: { event: e, widthpt: 320, heightpt: 240, '+xpt': 30, '-ypt': 10 },
      domainKey: dk, params: ps, collapsible: true,
      record: record && record.getId(),

      onclose: function()
      {
        if(!winmain.retradeEditDone) return
        Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").reload()
      }
    })
  }

  extjsf.bindHandler("${z:vid(v, 'add-good')}", '${rootView.extjsDomain}', function(btn, event)
  {
    extjsf.bind("${z:vid(v, 'add-good')}", '${rootView.extjsDomain}').
      retradeOpenGoodWindow(null, event)
  })

      //]]>
      </script>

      <!-- add-edit good] -->


      <!-- [add goods table -->

      <x:component coid = "${z:vid(v, 'add-goods-table')}">
        <f:facet name = "extjs-props">
         xtype: 'button', text: 'Создать +',
         margin: extjsf.dpts(0, 0, 0, 4),
         tooltipType: 'title', tooltip: 'Создать новые товары в табличной форме поместить их в каталог (указанный на момент открытия формы)',
         disabled: ${not rootView.isSecure('edit: goods')}
       </f:facet>
      </x:component>

      <script type = "text/javascript">
      //<![CDATA[

  extjsf.bindHandler("${z:vid(v, 'add-goods-table')}", '${rootView.extjsDomain}', function(btn, e)
  {
    var dk  = "${z:vid(v, 'add-goods-table')}:"
    var ps  = { disableSelSet: true }

    //~: add the folder selected
    var fld  = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
      getSelectionModel().getSelection()
    if(fld && (fld.length == 1)) fld = fld[0] && fld[0].get('modelId')
    if(fld && fld.length && (fld.charAt(0) != '$'))
      ps.goodsFolder = fld

    //~: open the window
    var winmain; winmain = retrade_open_window({ url: '/goods/create-goods',
      tempDomain: 'add-goods-table', collapsible: true, params: ps,
      box: { event: e, widthpt: 480, heightpt: 240, '+xpt': -100, '-height': true },

      onclose: function()
      {
        if(!winmain.retradeEditDone) return
        Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").reload()
      }
    })
  })

      //]]>
      </script>

      <!-- add goods table] -->

      </ui:fragment>

      <x:component coid = "${z:vid(v, '_folder_goods_tb_fill_0')}">
        <f:facet name = "extjs-props">
          xtype: 'panel', flex: 1, frame: false, border: false,
          bodyCls: 'retrade-toolbar-inline-panel'
        </f:facet>
      </x:component>


      <!-- [with sub-folders checkbox] -->
      <x:checkbox-field coid = "${z:vid(v, 'with-subfolders')}" value = "#{true}">
        <f:facet name = "label-props">
          labelAlign: 'left', margin: extjsf.dpts(0, 2, 0, 0), cls: 'retrade-info-title-label',
          html: "&lt;span title = 'Включить товары подкаталогов выбранного каталога'&gt;Подкаталоги&lt;/span&gt;"
        </f:facet>
      </x:checkbox-field>


      <x:component coid = "${z:vid(v, 'goods-filter')}">
        <f:facet name = "extjs-props">
          xtype: 'panel', bodyCls: 'retrade-transparent-panel',
          border: false, layout: {type: 'hbox', align: 'middle'},
          hidden: #{canEditTree}
        </f:facet>


        <!-- [filter goods field -->

        <x:text-field coid = "${z:vid(v, 'search-goods')}"
          value = "#{v.model.searchNames}">

          <f:facet name = "extjs-props">
            margin: extjsf.dpts(0, 0, 0, 4),
            width:  extjsf.ex(24)
          </f:facet>

          <f:facet name = "label-props">
            text: 'поиск', margin: extjsf.pts(0, 0, 0, 8),
            cls: 'retrade-info-title-label'
          </f:facet>
        </x:text-field>


         <!-- [restrict to selection set] -->

         <x:component coid = "${z:vid(v, 'search-goods-selset')}">
           <f:facet name = "extjs-props">

             xtype: 'button', enableToggle: true,
             width: 32, componentCls: 'retrade-icon-24',
             margin: extjsf.dpts(0, 0, 0, 6),
             iconCls: 'retrade-selset-button-icon',
             tooltipType: 'title', tooltip: 'Ограничить текущей выборкой'

          </f:facet>
        </x:component>


        <x:action-call coid = "${z:vid(v, 'search-goods-script')}"
          action = "#{v.doSearchGoods}">

          <f:facet name = "action-params">
            '${v.modelParam}': '${v.modelKeys}'
          </f:facet>
        </x:action-call>

        <script type = "text/javascript">
        //<![CDATA[

    extjsf.bind("${z:vid(v, 'search-goods')}", '${rootView.extjsDomain}').on('change', function(f)
    {
      var sv = ZeTS.trim(f.getValue());
      if(!f.extjsfBind) return; f.extjsfBind.searchValue = sv;

      var fn = function()
      {
        //?: {search string was changed} discard
        if(f.extjsfBind.searchValue != sv) return;

        var params = { searchGoods: sv };
        var selchk = extjsf.bind("${z:vid(v, 'search-goods-selset')}", '${rootView.extjsDomain}').component();
        if(selchk.pressed) params.selset = ReTrade.selset.selset;

        extjsf.bindHandler("${z:vid(v, 'search-goods-script')}", '${rootView.extjsDomain}')({
          params: params, success : function() {
            Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").loadPage(1)
        }})
      }

      setTimeout(fn, 1000)
    })

    //~: selection set only toggled
    extjsf.bind("${z:vid(v, 'search-goods-selset')}", '${rootView.extjsDomain}').on('toggle', function()
    {
        var names  = extjsf.bind("${z:vid(v, 'search-goods')}", '${rootView.extjsDomain}').value();
        var params = { searchGoods: names };

        var selchk = extjsf.bind("${z:vid(v, 'search-goods-selset')}", '${rootView.extjsDomain}').component();
        if(selchk.pressed) params.selset = ReTrade.selset.selset;

        extjsf.bindHandler("${z:vid(v, 'search-goods-script')}", '${rootView.extjsDomain}')({
          params: params, success : function() {
            Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").loadPage(1)
        }})
    })

        //]]>
        </script>

        <!-- filter goods field] -->

      </x:component>
      </x:toolbar>

      <!-- goods panel toolbar] -->


      <!-- [goods table] -->

      <x:data-grid coid = "${z:vid(v, 'grid')}" selset = "true"
        storeId = "${z:vid(v, 'folderGoodsStore')}">

        <f:facet name = "grid-props">
          preventHeader: true, pager: true,
          sortableColumns: true, border: false,
          columns: ZeT.defined('#{goodsColumnModel}'),
          selModel: #{goodsColumnSelModel},
          cls: 'ux-grid-smaller'
       </f:facet>
      </x:data-grid>

    </x:component>

    <!-- goods table panel] -->

  </x:component>


  <x:action-call coid = "${z:vid(v, 'set-current-folder-script')}"
    action = "#{v.doSetCurrentFolder}">

    <f:facet name = "action-params">
      '${v.modelParam}': '${v.modelKeys}'
    </f:facet>
  </x:action-call>

  <script type = "text/javascript">
  //<![CDATA[

  Ext.onReady(function()
  {
    //~: connect tree (as grid) to selection set
    ReTrade.selset.grid("${z:vid(v, 'tree')}", '${rootView.extjsDomain}')
  })

  //~: display goods of current selection
  extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeSetGoodsPanelTitle = function(sel)
  {
    var fid  = sel.get('modelId');
    var root = extjsf.component("${z:vid(v, 'folder-goods-layout')}", '${rootView.extjsDomain}');

    if(fid == '$') root.setTitle('Товары всех каталогов')

    if((fid != '$') && (fid.charAt(0) == '$'))
      root.setTitle(ZeTS.cat(
         'Сохраните каталог [', sel.get('code'), '] ',  sel.get('name'), '!'
       ))

    if(fid.charAt(0) != '$')
      root.setTitle(ZeTS.cat(
         'Товары каталога [', sel.get('code'), '] ',  sel.get('name')
      ))
  }

  extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeShowFolderGoods = function()
  {
    var sel  = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').
      getSelectionModel().getSelection();

    var subf = extjsf.component("${z:vid(v, 'with-subfolders')}", '${rootView.extjsDomain}');

    //?: {the selection is empty} hide the panel
    sel = sel.length && sel[0]; if(!sel)
    {
      extjsf.component("${z:vid(v, 'folder-goods-panel')}", '${rootView.extjsDomain}').hide()
      return;
    }

    var fid = sel.get('modelId');

    //~: update the root title
    extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeSetGoodsPanelTitle(sel)

    //?: {it is a new folder}
    if((fid != '$') && (fid.charAt(0) == '$'))
    {
      extjsf.component("${z:vid(v, 'folder-goods-panel')}", '${rootView.extjsDomain}').hide()
      return;
    }

    extjsf.component("${z:vid(v, 'folder-goods-panel')}", '${rootView.extjsDomain}').show()

    //~: disable controls when root node selected
    if('#{canEditTree}' == 'true')
    {
      extjsf.component("${z:vid(v, 'tree-add-goods')}", '${rootView.extjsDomain}').setDisabled(fid == '$')
      extjsf.component("${z:vid(v, 'tree-move-goods')}", '${rootView.extjsDomain}').setDisabled(fid == '$')
      extjsf.component("${z:vid(v, 'tree-unlink-goods')}", '${rootView.extjsDomain}').setDisabled(fid == '$')
      extjsf.component("${z:vid(v, 'add-good')}", '${rootView.extjsDomain}').setDisabled(fid == '$')
      extjsf.component("${z:vid(v, 'add-goods-table')}", '${rootView.extjsDomain}').setDisabled(fid == '$')
    }


    //!: run change action
    extjsf.bindHandler("${z:vid(v, 'set-current-folder-script')}", '${rootView.extjsDomain}')({
      params: { currentFolder: fid, withSubFolders: subf.getValue() }, success: function()
      {
        Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").loadPage(1)
      }
    })
  }

  //~: on tree selection change
  extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').on('selectionchange', function(tree, sel)
  {
    //~: show the goods
    extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeShowFolderGoods()

    if('#{canEditTree}' == 'true')
    {

      //~: current selection
      sel = sel.length && sel[0];

      //?: {no selection | root}
      extjsf.component("${z:vid(v, 'tree-cut')}", '${rootView.extjsDomain}').
        setDisabled(!sel || (sel.get('modelId') == '$'))
    }
  })

  //~: with sub-folders changed
  extjsf.bind("${z:vid(v, 'with-subfolders')}", '${rootView.extjsDomain}').on('change', function()
  {
    extjsf.bind("${z:vid(v, 'tree')}", '${rootView.extjsDomain}').retradeShowFolderGoods()
  })

  //]]>
  </script>


  <ui:fragment rendered = "#{canEditTree}">

  <x:action-call coid = "${z:vid(v, 'tree-move-goods-script')}"
    action = "#{v.doMoveSelectedGoods}">

    <f:facet name = "action-params">
      '${v.modelParam}': '${v.modelKeys}'
    </f:facet>
  </x:action-call>

  <x:action-call coid = "${z:vid(v, 'tree-unlink-goods-script')}"
    action = "#{v.doMoveSelectedGoods}">

    <f:facet name = "action-params">
      '${v.modelParam}': '${v.modelKeys}'
    </f:facet>
  </x:action-call>


  <script type = "text/javascript">
  //<![CDATA[

  //~: move or copy selected goods implementation
  extjsf.bind("${z:vid(v, 'tree-add-goods')}", '${rootView.extjsDomain}').retradeMoveSelectedGoods = function(copy)
  {
    //~: current selection
    var tree = extjsf.component("${z:vid(v, 'tree')}", '${rootView.extjsDomain}');
    var sel  = tree.getSelectionModel().getSelection(); sel = sel.length && sel[0];

    //?: {not existing folder selected}
    if(!sel || (sel.get('modelId').charAt(0) == '$')) return;

    //~: call parameters
    var params = {
      destinationFolder: sel.get('modelId'),
      selset: ReTrade.desktop.selset
    };

    if(copy) params.copyGoods = true;

    //!: invoke the action
    extjsf.bindHandler("${z:vid(v, 'tree-move-goods-script')}", '${rootView.extjsDomain}')({
      params: params, success: function()
      {
        Ext.data.StoreManager.lookup("${z:vid(v, 'folderGoodsStore')}").loadPage(1)

        ReTrade.desktop.event(ZeTS.cat(
         'Товары текущей выборки были успешно ',
         (copy)?('скопированы'):('перенесены'),
         ' в каталог [', sel.get('code'), '].'
        ))
      }
    })
  }

  //~: add selected goods handler
  extjsf.bindHandler("${z:vid(v, 'tree-add-goods')}", '${rootView.extjsDomain}', function()
  {
    extjsf.bind("${z:vid(v, 'tree-add-goods')}", '${rootView.extjsDomain}').
     retradeMoveSelectedGoods(true)
  })

  //~: move selected goods handler
  extjsf.bindHandler("${z:vid(v, 'tree-move-goods')}", '${rootView.extjsDomain}', function()
  {
    extjsf.bind("${z:vid(v, 'tree-add-goods')}", '${rootView.extjsDomain}').
     retradeMoveSelectedGoods(false)
  })

  //~: edit good unit
  extjsf.bind("${z:vid(v, 'grid')}", '${rootView.extjsDomain}').
    on('itemdblclick', function(comp, rec, node, row, event)
  {
    extjsf.bind("${z:vid(v, 'add-good')}", '${rootView.extjsDomain}').
      retradeOpenGoodWindow(rec, event)
  })

  //]]>
  </script>

  </ui:fragment>

  <!-- grid with folder goods] -->


  <ui:insert name = 'tree-ext'/>

</x:root-panel>
</ui:define>
</ui:decorate>