<ui:component xmlns:ui = 'http://java.sun.com/jsf/facelets'
  xmlns:c  = 'http://java.sun.com/jsp/jstl/core'
  xmlns:f  = 'http://java.sun.com/jsf/core'
  xmlns:z  = 'uri:extjs.jsf.java.net'>

<c:set var = "v" scope = "request" value = "${facesSettingsAblesView}"/>

${v.forceSecureEntity(v.authLogin, 'secure: view: ables')}
${v.checkModelRequestedWithRedirect}

<ui:decorate template = '/resources/.view-modes/body.xhtml'
   xmlns    = 'http://www.w3.org/1999/xhtml'
   xmlns:h  = 'http://java.sun.com/jsf/html'
   xmlns:x  = 'http://java.sun.com/jsf/composite/extjsf'>

<ui:define name = 'page-body'>

<x:winmain coid = "${z:vid(v, 'root_panel')}">

  <script type = "text/javascript">
  //<![CDATA[

    extjsf.co('window', '${extDom}').
      setTitle("Правила доступа п-ля ${z:jss(v.loginTitle)}")

  //]]>
  </script>


  <f:facet name = "extjs-props">
    layout: { type: 'vbox', align: 'stretch' }
  </f:facet>

  <f:facet name = "toolbar-props">
    xtype: 'panel', bodyPadding: extjsf.pt(2),
    layout: {type: 'hbox', align: 'middle'},
    bodyCls: 'retrade-toolbar-panel'
  </f:facet>


  <!-- [toolbar -->

  <f:facet name = "toolbar">

    <!-- [cancel edit button] -->

    <x:component coid = "${z:vid(v, 'close_window')}">
      <f:facet name = "extjs-props">
        xtype: 'button', text: 'Закрыть',

        handler : function()
        {
          extjsf.co('window', '${extDom}').close()
        }
      </f:facet>
    </x:component>

    <!-- [add ables button] -->

    <x:component coid = "${z:vid(v, 'secure-set-able-sets-and-rules')}">
      <f:facet name = "extjs-props">

        xtype: 'button', text: 'Добавить',
        margin: extjsf.pts(1, 0, 1, 6), tooltipType: 'title',
        disabled: ${not v.isSecure('secure: operate: rules')},
        tooltip: 'Добавить правила и множества правил доступа из текущей выборки. ' +
          '(Выбранные правила будут добавлены в множество по умолчанию)'

      </f:facet>
    </x:component>


    <!-- [revoke selected rules and sets -->

    <x:component coid = "${z:vid(v, 'secure-set-revoke-ables-menu-button')}">

      <f:facet name = "extjs-props">

        xtype: 'button', margin: extjsf.pts(1, 0, 1, 6),
        text: 'Удалить', tooltipType: 'title',
        disabled: ${not v.isSecure('secure: operate: rules')},
        tooltip: 'Удалить правила у пользователя одним из методов:'

      </f:facet>

      <x:menu coid = "${z:vid(v, 'secure-set-revoke-ables-menu')}">
        <f:facet name = "extjs-props">
          showSeparator: false
        </f:facet>

        <x:component coid = "${z:vid(v, 'secure-set-revoke-ables-from-table')}">
          <f:facet name = "extjs-props">

            text: 'Выбранные в таблице', xtype: 'menuitem', tooltipType: 'title',
            tooltip: 'Удалить правила, выбранные в таблице. Если вы удалите все ' +
              'правила множества, то связь с множеством теряется! ' +
              'В множестве по умолчанию отображаются правила, назначенные напрямую'

          </f:facet>
        </x:component>

        <x:component coid = "${z:vid(v, 'secure-set-revoke-ables-of-rules')}">
          <f:facet name = "extjs-props">

            text: 'Правила мн-ва по умолчанию', xtype: 'menuitem', tooltipType: 'title',
            tooltip: 'Удалить правила текущей выборки, назначенные позльзователю ' +
              'напрямую. (Из множества по умолчанию)'

          </f:facet>
        </x:component>

        <x:component coid = "${z:vid(v, 'secure-set-revoke-ables-of-rules-anywhere')}">
          <f:facet name = "extjs-props">

            text: 'Правила из всех множеств', xtype: 'menuitem', tooltipType: 'title',
            tooltip: 'Удалить правила текущей выборки из всех множеств, назначенных ' +
              'пользоватею, включая множество по умолчанию'

          </f:facet>
        </x:component>

        <x:component coid = "${z:vid(v, 'secure-set-revoke-ables-of-sets')}">
          <f:facet name = "extjs-props">

            text: 'Множества правил', xtype: 'menuitem', tooltipType: 'title',
            tooltip: 'Удалить множества правил из текущей выборки'

          </f:facet>
        </x:component>
      </x:menu>
    </x:component>

    <!-- revoke selected rules and sets] -->


    <x:component coid = "${z:vid(v, '_tb_fill_0')}">
      <f:facet name = "extjs-props">
        xtype: 'panel', flex: 1, frame: false, border: false,
        bodyCls: 'retrade-toolbar-panel'
      </f:facet>
    </x:component>


    <!-- [filter ables field -->

    <x:text-field coid = "${z:vid(v, 'search-ables')}"
      value = "#{v.searchNames}">

      <f:facet name = "extjs-props">
        margin: extjsf.pts(1, 0, 1, 4),
        width:  extjsf.ex(24)
      </f:facet>

      <f:facet name = "label-props">
        text: 'Поиск'
      </f:facet>
    </x:text-field>

    <x:action-call coid = "${z:vid(v, 'search-ables-script')}"
      action = "#{v.doSearchRules}" modelView = "${v}"/>

    <!-- filter ables field] -->


    <!-- [restrict to selection set -->

    <x:component coid = "${z:vid(v, 'search-ables-selset')}">
      <f:facet name = "extjs-props">

       xtype: 'button', enableToggle: true,
       width: retrade_default('button-selset').width,
       height: retrade_default('button-selset').height,
       componentCls: 'retrade-icon-24',
       margin: extjsf.pts(1, 0, 1, 6),
       iconCls: 'retrade-selset-button-icon',
       tooltipType: 'title', tooltip: 'Ограничить текущей выборкой'

     </f:facet>
    </x:component>

    <!-- restrict to selection set] -->

    <script type = "text/javascript">
    //<![CDATA[

    //~: on search field value changed
    extjsf.bind("${z:vid(v, 'search-ables')}", '${extDom}').on('change', function(f)
    {
      var sv = ZeTS.trim(f.getValue());
      if(!f.extjsfBind) return; f.extjsfBind.searchValue = sv;

      ZeT.timeout(1000, function()
      {
        //?: {search string was changed} discard
        if(f.extjsfBind.searchValue != sv) return;

        var params = { searchAbles: sv };
        var selchk = extjsf.bind("${z:vid(v, 'search-ables-selset')}", '${extDom}').co();
        if(selchk.pressed) params.selset = ReTrade.selset.selset;

        extjsf.handler("${z:vid(v, 'search-ables-script')}", '${extDom}')({
          params: params, success : function() {
            Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
        }})
      })
    })

    //~: selection set only toggled
    extjsf.bind("${z:vid(v, 'search-ables-selset')}", '${extDom}').on('click', function()
    {
        var names  = extjsf.bind("${z:vid(v, 'search-ables')}", '${extDom}').value();
        var params = { searchAbles: names };

        var selchk = extjsf.bind("${z:vid(v, 'search-ables-selset')}", '${extDom}').co();
        if(selchk.pressed) params.selset = ReTrade.selset.selset;

        extjsf.handler("${z:vid(v, 'search-ables-script')}", '${extDom}')({
          params: params, success : function() {
            Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
        }})
    })

    //]]>
    </script>

  </f:facet>

  <!-- toolbar] -->

  <!-- [rule description text -->


  <x:html coid = "${z:vid(v, '_secure_rule_descr')}">
    <f:facet name = "extjs-props">
       xtype: 'panel', border: false, height: extjsf.pt(32),
       bodyCls: 'retrade-content-panel'
    </f:facet>

    <div id = "${z:vid(v, 'secure-rule-descr')}"
      class = "retrade-settings-secure-rule-descr">

      Каждое правило доступа имеет свою область действия. Выделите назначенное
      пользователю правило в таблице, чтобы узнать его назначение.

    </div>
  </x:html>


  <!-- rule description text] -->

  <x:component coid = "${z:vid(v, '_secure_rule_descr_spliter')}">
    <f:facet name = "extjs-props">
      xtype: 'splitter', collapsible: false
    </f:facet>
  </x:component>

  <!-- [secure ables list -->

  <x:data-store storeId = "${z:vid(v, 'ablesStore')}" modelView = "${v}">

    <f:facet name = "store-props">
      model: 'retrade.model.SecAbleView', pageSize: 20
    </f:facet>

    <f:facet name = "proxy-props">
      reader: ZeT.defined('retrade.readers.SecAbleView')
    </f:facet>
  </x:data-store>

  <x:data-grid coid = "${z:vid(v, 'grid')}"
    storeId = "${z:vid(v, 'ablesStore')}">

    <f:facet name = "grid-props">

      pager: true, preventHeader: true, flex: 1,
      columns: ZeT.defined('retrade.columns.SecAbleView'),
      selModel: extjsf.delayCreate('Ext.selection.RowModel', { mode: 'MULTI' })

    </f:facet>
  </x:data-grid>

  <x:action-call coid = "${z:vid(v, 'secure-set-able-sets-and-rules-script')}"
    action = "#{v.doGrantSelectedRulesAndSets}" modelView = "${v}"/>

  <x:action-call coid = "${z:vid(v, 'secure-set-revoke-ables-from-table-script')}"
    action = "#{v.doRevokeSelectedAbles}" modelView = "${v}"/>

  <x:action-call coid = "${z:vid(v, 'secure-set-revoke-ables-of-rules-script')}"
    action = "#{v.doRevokeAblesOfDefaultSet}" modelView = "${v}"/>

  <x:action-call coid = "${z:vid(v, 'secure-set-revoke-ables-of-rules-anywhere-script')}"
    action = "#{v.doRevokeAblesOfAllSets}" modelView = "${v}"/>

  <x:action-call coid = "${z:vid(v, 'secure-set-revoke-ables-of-sets-script')}"
    action = "#{v.doRevokeSelectedSets}" modelView = "${v}"/>

  <!-- secure ables list] -->


  <script type = "text/javascript">
  //<![CDATA[

  extjsf.bind("${z:vid(v, 'grid')}", '${extDom}').on('selectionchange', function(grid, selected)
  {
    var m = (selected.length == 1) && selected[0];
    var n = Ext.get("${z:vid(v, 'secure-rule-descr')}");

    if(!m) n.setHtml(grid.retradeAboutComment); else
    {
      if(!grid.retradeAboutComment)
        grid.retradeAboutComment = n.getHtml();
      n.setHtml(Ext.String.htmlEncode(m.get('descr')))
    }

  })

  //~: grant secure sets and rules of current selection set
  extjsf.handler("${z:vid(v, 'secure-set-able-sets-and-rules')}", '${extDom}', function()
  {
     extjsf.handler("${z:vid(v, 'secure-set-able-sets-and-rules-script')}", '${extDom}')({
       params: { selset: ReTrade.selset.selset }, success: function()
       {
          ReTrade.desktop.event("Пользователю ${z:jss(v.loginTitle)} были успешно назначены правила и множества текущей выборки.")
          Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
       }
     })
  })

  //~: revoke the ables selected in the grid
  extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-from-table')}", '${extDom}', function()
  {
    var m = extjsf.co("${z:vid(v, 'grid')}", '${extDom}').getSelectionModel().getSelection();

    if(!m || !m.length) return; else m = ZeT.a(m);
    for(var i = 0;(i < m.length);i++) m[i] = m[i].getId();

    extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-from-table-script')}", '${extDom}')({
      params: { secAbles: m } , success: function()
      {
        Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
      }
    })
  })

  //~: revoke the ables of the default set
  extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-rules')}", '${extDom}', function()
  {
     extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-rules-script')}", '${extDom}')({
       params: { selset: ReTrade.selset.selset }, success: function()
       {
          ReTrade.desktop.event(ZeTS.cat(
            "Правила из текущей выборки для множества по умолчанию ",
            "пользователя ${z:jss(v.loginTitle)} были успешно удалены."
          ))

          Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
       }
     })
  })

  //~: revoke the ables of all the sets
  extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-rules-anywhere')}", '${extDom}', function()
  {
     extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-rules-anywhere-script')}", '${extDom}')({
       params: { selset: ReTrade.selset.selset }, success: function()
       {
          ReTrade.desktop.event(ZeTS.cat(
            "Правила из текущей выборки по всем множествам ",
            "пользователя ${z:jss(v.loginTitle)} были успешно удалены."
          ))

          Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
       }
     })
  })

  //~: revoke the ables of the selected sets
  extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-sets')}", '${extDom}', function()
  {
     extjsf.handler("${z:vid(v, 'secure-set-revoke-ables-of-sets-script')}", '${extDom}')({
       params: { selset: ReTrade.selset.selset }, success: function()
       {
          ReTrade.desktop.event(ZeTS.cat(
            "Множества правил из текущей выборки были успешно удалены ",
            "для пользователя ${z:jss(v.loginTitle)}."
          ))

          Ext.data.StoreManager.lookup("${z:vid(v, 'ablesStore')}").load()
       }
     })
  })

  //]]>
  </script>


</x:winmain>
</ui:define>
</ui:decorate>

<ui:decorate template = '/resources/.view-modes/body_post.xhtml'
   xmlns    = 'http://extjs.jsf.java.net/response'
   xmlns:ui = 'http://java.sun.com/jsf/facelets'>

  <ui:define name = 'validation'>
    <validation success = "true"/>
  </ui:define>
</ui:decorate>
</ui:component>