<?xml version = '1.0' encoding = 'UTF-8'?>

<ui:fragment xmlns = 'http://www.w3.org/1999/xhtml'
   xmlns:ui = 'http://java.sun.com/jsf/facelets'
   xmlns:co = 'http://java.sun.com/jsf/composite'
   xmlns:z  = 'uri:tverts.com'>

  <co:interface>

    <!--
         Winmain component is a panel to install
         as a content of a Window that supports
         optional toolbar and status bar panels
         (that are regular Ext JS panels).
    -->

    <!--
         Name of the Bind created for the content panel.
    -->
    <co:attribute name = 'coid' required = 'true'
       type = 'java.lang.String'/>

    <!--
         Ordinary, each window is created in own Domain
         with 'window' Bind name. If more than one window
         may be created per Domain, alternate names must
         be defined and told as this optional parameter.
    -->
    <co:attribute name = 'windowBind' default = 'window'
       type = 'java.lang.String'/>

    <co:attribute name = 'webLink' default = 'true'
       type = 'java.lang.Boolean'/>

    <!--
         Properties of the root content panel.
    -->
    <co:facet name = 'extjs-props'/>

    <!--
         Properties of the toolbar panel.
    -->
    <co:facet name = 'toolbar-props'/>

    <!--
         Content of the toolbar.
         Panel is not created if it has no children!
    -->
    <co:facet name = 'toolbar'/>

    <!--
         Properties of the status bar panel.
    -->
    <co:facet name = 'status-props'/>

    <!--
         Content of the status bar.
         Panel is not created if it has no children!
    -->
    <co:facet name = 'status'/>

  </co:interface>

  <co:implementation>

    <div id = "#{cc.clientId}-#{cc.attrs.coid}-props" style = "display:none">
      <co:renderFacet name = "extjs-props"/>
    </div>

    <div id = "#{cc.clientId}-#{cc.attrs.coid}-toolbar-props" style = "display:none">
      <co:renderFacet name = "toolbar-props"/>
    </div>

    <div id = "#{cc.clientId}-#{cc.attrs.coid}-status-props" style = "display:none">
      <co:renderFacet name = "status-props"/>
    </div>

    <script type = "text/javascript">
    //<![CDATA[

      extjsf.domain('${extDom}').
        bind('#{cc.attrs.coid}', new extjsf.Bind()).ids('#{cc.clientId}').
        renderTo('#{cc.attrs.renderTo}', '#{cc.attrs.renderParent}').
        parent('#{cc.parent.attrs.coid}').props({ xtype: 'panel' }).
        props({ layout: 'border', region: 'center', border: false }).
        props({ bodyPadding: extjsf.pt(1) }).readPropsNode().
        scope(extjsf.bind('#{cc.attrs.windowBind}', '${extDom}'),
          function(winmain, window)
          {
            //~: install positioning strategy
            if(!window.WinAlign) new ReTrade.WinAlign({ window: window })


    //~: create the toolbar
    var toolbar = extjsf.domain('${extDom}').
      bind('#{cc.attrs.coid}-toolbar', new extjsf.Bind())
    toolbar.nodeId("#{cc.clientId}-#{cc.attrs.coid}-toolbar")
    toolbar.props({xtype: 'toolbar', dock: 'top', border: false}).
      readPropsNode()

    //~: create the status bar
    var status = extjsf.domain('${extDom}').
      bind('#{cc.attrs.coid}-status', new extjsf.Bind())
    status.nodeId("#{cc.clientId}-#{cc.attrs.coid}-status")
    status.props({xtype: 'statusbar', dock: 'bottom', border: false})
    status.readPropsNode()
          })


    //]]>
    </script>


    <!-- [insert toolbar controls -->

    <co:renderFacet name = "toolbar"/>

    <script type = "text/javascript">

  ZeT.scope(function()
  {
    var domain  = '${extDom}';
    var panel   = extjsf.bind("#{cc.attrs.coid}", domain);
    var toolbar = extjsf.bind('#{cc.attrs.coid}-toolbar', domain);

    //HINT: we steal the items from the window panel
    //  and add them to the toolbar!

    toolbar.replaceItems(panel.replaceItems())

  })

    </script>

    <!-- insert toolbar controls] -->


    <!-- [insert status bar controls -->

    <co:renderFacet name = "status"/>

    <script type = "text/javascript">

  ZeT.scope(function()
  {
    var domain = '${extDom}';
    var panel  = extjsf.bind("#{cc.attrs.coid}", domain);
    var status = extjsf.bind('#{cc.attrs.coid}-status', domain);

    //HINT: we steal the items from the window panel
    //  and add them to the status bar (the same as for the toolbar)!

    status.replaceItems(panel.replaceItems())

  })

    </script>

    <!-- insert status bar controls] -->


    <co:insertChildren/>

    <script type = "text/javascript">
    //<![CDATA[

  ZeT.scope(function()
  {
    var domain  = '${extDom}'
    var window = extjsf.bind('#{cc.attrs.windowBind}', domain)
    if(!window || !window.co()) return

    var panel   = extjsf.bind("#{cc.attrs.coid}", domain)
    var toolbar = extjsf.bind('#{cc.attrs.coid}-toolbar', domain)
    var status  = extjsf.bind('#{cc.attrs.coid}-status', domain)

    //?: {toolbar has items} add it to the window
    if(toolbar.hasItems() || toolbar.hasHTML())
      window.co().addDocked(toolbar.buildProps())

    //?: {status bar has items} add it to the window
    if(status.hasItems() || status.hasHTML())
      window.co().addDocked(status.buildProps())

    //!: add the panel to the window
    window.co().add(panel.buildProps())

    //~: install web link tool
    ZeT.scope(function()
    {
      //?: {link is not allowed}
      if("#{cc.attrs.webLink}" === 'false')
      {
        if(ZeT.isu(window.webLink))
          window.webLink = false
        return
      }

      //?: {tool is already installed}
      if(!ZeT.isu(window.webLink)) return

      var tool = window.webLink = {
        xtype: 'tool', cls: 'retrade-web-link-tool',
        tooltipType: 'title', tooltip: 'Создать постоянную ссылку на окно'
      }

      //~: web link + tool handler
      tool.handler = ZeT.fbind(retrade_add_user_web_link, this, {
        link: "#{z:jss(rootView.requestURI)}",
        entity: "#{rootView.entityKey}",
        params: "#{z:jss(rootView.requestParams)}",
        text: window.co().title,
        domain: domain, box: {
          width: window.co().getWidth(),
          height: window.co().getHeight() }
      })

      //~: insert tool in the window's header
      var items = window.co().getHeader().items
      for(var i = 0;(i < items.getCount());i++)
        if(items.get(i).xtype == 'tool')
          return window.co().getHeader().insert(i, tool)

      //~: append a single tool
      window.co().addTool([ tool ])
    })
  })

    //]]>
    </script>

  </co:implementation>
</ui:fragment>