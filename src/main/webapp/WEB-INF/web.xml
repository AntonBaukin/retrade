<?xml version = '1.0' encoding = 'UTF-8'?>

<web-app version = '3.0'
  xmlns              = 'http://java.sun.com/xml/ns/javaee'
  xmlns:xsi          = 'http://www.w3.org/2001/XMLSchema-instance'
  xsi:schemaLocation = 'http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd'>

  <display-name>
    Tver TS 'Re Trade' Execution Base (Abstract) Module
  </display-name>


  <!--====================================================
    =                      Listeners                     =
    ====================================================-->

  <!-- System Boot Initializer -->

  <listener>
    <description>
      The first listener activated during
      the web application startup. Does not
      connect components via Spring services.
    </description>

    <display-name>System Boot Initializer</display-name>
    <listener-class>
      com.tverts.servlet.listeners.SystemBootListener
    </listener-class>
  </listener>


  <!-- Spring Context and Request Listeners -->

  <context-param>
    <description>
      Location of Log4J config for Spring Log4J
      initialization listener.
    </description>

    <param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/log4j.xml</param-value>
  </context-param>
  
  <listener>
    <description>
      Spring Log4J configuration setup.
    </description>

    <display-name>Spring Log4J Configurator</display-name>
    <listener-class>
      com.tverts.spring.Log4jConfigListener
    </listener-class>
   </listener>

  <listener>
    <description>
      Spring framework startup initialization.
    </description>

    <display-name>Spring Startup Context Listener</display-name>
    <listener-class>
      com.tverts.spring.ContextLoaderListener
    </listener-class>
  </listener>

  <listener>
    <description>
      Initializes the request context for Spring framework.
    </description>

    <display-name>Spring Request Context Listener</display-name>
    <listener-class>
      com.tverts.spring.RequestContextListener
    </listener-class>
  </listener>


  <!-- Java Server Faces (Mojarra RI) Listener -->

  <listener>
    <description>
      JavaServer Faces initialization configuration listener.
    </description>

    <display-name>Java Server Faces Configure</display-name>
    <listener-class>
      com.tverts.faces.system.FacesConfigureListener
    </listener-class>
  </listener>

  <listener>
    <description>
      JavaServer Faces application lifecycle listener.
    </description>

    <display-name>Java Server Faces Configure</display-name>
    <listener-class>
      com.tverts.faces.system.WebappLifecycleListener
    </listener-class>
  </listener>


  <!-- Web Application Context Initializer -->

  <listener>
    <description>
      Initializes the application's modules.

      This listener is a bridge to the collection
      of listeners defined within the application.
    </description>

    <display-name>Web Application Context Initializer</display-name>
    <listener-class>
      com.tverts.servlet.listeners.ServletContextListenerBridge
    </listener-class>
  </listener>


  <!-- Web Application Request Initializer -->

  <listener>
    <description>
      Binds the pending request with various runtime
      structures of the application.

      This listener is a bridge to the collection
      of listeners defined within the application.
    </description>

    <display-name>Web Application Request Initializer</display-name>
    <listener-class>
      com.tverts.servlet.listeners.ServletRequestListenerBridge
    </listener-class>
  </listener>


  <!--====================================================
    =            Java Server Faces Configuration         =
    ====================================================-->

  <context-param>
    <param-name>javax.faces.CONFIG_FILES</param-name>
    <param-value>
      /WEB-INF/faces-config.xml,
      /WEB-INF/faces-nav.xml
    </param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>server</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.FACELETS_LIBRARIES</param-name>
    <param-value>/WEB-INF/tverts.taglib.xml</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.SEPARATOR_CHAR</param-name>
    <param-value>-</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.PROJECT_STAGE</param-name>
    <param-value>Production</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
    <param-value>0</param-value>
  </context-param>

  <context-param>
    <param-name>com.sun.faces.disableIdUniquenessCheck</param-name>
    <param-value>true</param-value>
  </context-param>


  <!--====================================================
    =                      Servlets                      =
    ====================================================-->

  <!-- JavaServer Faces 2 Servlet -->
  <servlet>
    <display-name>JavaServer Faces 2.x Servlet</display-name>
    <servlet-name>faces_FacesServlet</servlet-name>
    <servlet-class>com.tverts.faces.system.FacesServletWrapper</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--
   * HINT: this servlet is needed, because Mojarra RI
   *   searches it by exact class match, and don't start
   *   JSF implementation, if it's absent.
   -->
  <servlet>
    <display-name>JavaServer Faces 2.x Phony Servlet</display-name>
    <servlet-name>faces_FacesPhonyServlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <enabled>false</enabled>
  </servlet>

  <servlet-mapping>
    <servlet-name>faces_FacesServlet</servlet-name>
    <url-pattern>*.xhtml</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>faces_FacesPhonyServlet</servlet-name>
    <url-pattern>/nowhere</url-pattern>
  </servlet-mapping>


  <!--====================================================
    =                      Servlets                      =
    ====================================================-->

  <!-- Request Filter Bridge -->

  <filter>
    <description>
      Connects REQUEST filtering ussued by the web
      container with the application-level filters.

      This bridge handles only dynamic resources:
      XHTML (Java Server Faces) and JSP documents.
    </description>

    <filter-name>filter_RequestBridge</filter-name>
    <filter-class>
      com.tverts.servlet.filters.FilterBridge
    </filter-class>

    <init-param>
      <description>
        Defines that this bridge is related to
        REQUEST filter stage processing.
      </description>

      <param-name>for</param-name>
      <param-value>REQUEST</param-value>
    </init-param>
    
    <init-param>
      <description>
        Defines Spring controlled Bean name of
        the application-level filters root reference.
        The value specified here is the default.
      </description>

      <param-name>bean</param-name>
      <param-value>filterPoint</param-value>
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>filter_RequestBridge</filter-name>
    <url-pattern>/go/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>


  <!-- Include Filter Bridge -->

  <filter>
    <description>
      Connects INCLUDE filtering ussued by the web
      container with the application-level filters.
    </description>

    <filter-name>filter_IncludeBridge</filter-name>
    <filter-class>
      com.tverts.servlet.filters.FilterBridge
    </filter-class>

    <init-param>
      <param-name>for</param-name>
      <param-value>INCLUDE</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>filter_IncludeBridge</filter-name>
    <url-pattern>*</url-pattern>
    <dispatcher>INCLUDE</dispatcher>
  </filter-mapping>


  <!-- Forward Filter Bridge -->

  <filter>
    <description>
      Connects FORWARD filtering ussued by the web
      container with the application-level filters.
    </description>

    <filter-name>filter_ForwardBridge</filter-name>
    <filter-class>
      com.tverts.servlet.filters.FilterBridge
    </filter-class>

    <init-param>
      <param-name>for</param-name>
      <param-value>FORWARD</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>filter_ForwardBridge</filter-name>
    <url-pattern>*</url-pattern>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>


  <!-- Error Filter Bridge -->

  <!--
  <filter>
    <description>
      Connects ERROR filtering ussued by the web
      container with the application-level filters.
    </description>

    <filter-name>filter_ErrorBridge</filter-name>
    <filter-class>
      com.tverts.servlet.filters.FilterBridge
    </filter-class>

    <init-param>
      <param-name>for</param-name>
      <param-value>ERROR</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>filter_ErrorBridge</filter-name>
    <url-pattern>*</url-pattern>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>
  -->


  <!--====================================================
    = JSP Engine Configuration                           =
    ====================================================-->

  <welcome-file-list>
    <welcome-file>/go/index</welcome-file>
  </welcome-file-list>

  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <url-pattern>*.jspf</url-pattern>

      <page-encoding>UTF-8</page-encoding>
    </jsp-property-group>
  </jsp-config>

  <session-config>
    <!-- 480 minutes -->
    <session-timeout>480</session-timeout>
  </session-config>
</web-app>